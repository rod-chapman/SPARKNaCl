with SPARKNaCl;                use SPARKNaCl;
with SPARKNaCl.Debug;          use SPARKNaCl.Debug;
with SPARKNaCl.Hashing.SHA384; use SPARKNaCl.Hashing.SHA384;
with Interfaces;               use Interfaces;
procedure Hash2
is
   R1 : Digest;

   --  FIPS 180-4 SHA-384 Test Cases
   --  From https://csrc.nist.gov/Projects/ \
   --         Cryptographic-Algorithm-Validation-Program/Secure-Hashing
   --  SHA Test Vectors for Hashing Byte-Oriented Messages
   --  (SHA384ShortMsg.rsp)
   FIPS_0   : constant Byte_Seq (1 .. 0) := (others => <>);
   FIPS_8   : constant Byte_Seq (0 .. 0) := (others => 16#c5#);
   FIPS_16  : constant Byte_Seq := (16#6e#, 16#ce#);
   FIPS_24  : constant Byte_Seq := (16#1f#, 16#a4#, 16#d5#);
   FIPS_32  : constant Byte_Seq := (16#50#, 16#e3#, 16#85#, 16#3d#);
   FIPS_40  : constant Byte_Seq := (
      16#4b#, 16#5f#, 16#ab#, 16#61#, 16#e0#
   );
   FIPS_48  : constant Byte_Seq := (
      16#da#, 16#d9#, 16#5a#, 16#4b#, 16#4d#, 16#37#
   );
   FIPS_56  : constant Byte_Seq := (
      16#12#, 16#18#, 16#35#, 16#fe#, 16#37#, 16#00#, 16#b7#
   );
   FIPS_64  : constant Byte_Seq := (
      16#de#, 16#60#, 16#27#, 16#5b#, 16#da#, 16#fc#, 16#e4#, 16#b1#
   );
   FIPS_72  : constant Byte_Seq := (
      16#8d#, 16#45#, 16#a5#, 16#5d#, 16#5c#, 16#e1#, 16#f9#, 16#28#,
      16#e6#
   );
   FIPS_80  : constant Byte_Seq := (
      16#5c#, 16#7d#, 16#de#, 16#9b#, 16#38#, 16#94#, 16#d7#, 16#3c#,
      16#ef#, 16#e1#
   );
   FIPS_88  : constant Byte_Seq := (
      16#96#, 16#7f#, 16#a3#, 16#4c#, 16#07#, 16#e4#, 16#94#, 16#5a#,
      16#77#, 16#05#, 16#1a#
   );
   FIPS_96  : constant Byte_Seq := (
      16#22#, 16#09#, 16#11#, 16#2e#, 16#e7#, 16#79#, 16#bf#, 16#6d#,
      16#95#, 16#71#, 16#11#, 16#05#
   );
   FIPS_104  : constant Byte_Seq := (
      16#20#, 16#44#, 16#2e#, 16#1c#, 16#3f#, 16#3c#, 16#88#, 16#91#,
      16#9c#, 16#39#, 16#97#, 16#8b#, 16#78#
   );
   FIPS_112  : constant Byte_Seq := (
      16#4d#, 16#43#, 16#70#, 16#2b#, 16#e4#, 16#f0#, 16#53#, 16#03#,
      16#19#, 16#55#, 16#5d#, 16#7f#, 16#1a#, 16#33#
   );
   FIPS_120  : constant Byte_Seq := (
      16#5e#, 16#2a#, 16#79#, 16#a5#, 16#44#, 16#af#, 16#85#, 16#f1#,
      16#50#, 16#f7#, 16#a9#, 16#d2#, 16#09#, 16#fd#, 16#44#
   );
   FIPS_128  : constant Byte_Seq := (
      16#e1#, 16#bb#, 16#96#, 16#7b#, 16#5d#, 16#37#, 16#9a#, 16#4a#, 
      16#a3#, 16#90#, 16#50#, 16#27#, 16#4d#, 16#09#, 16#bd#, 16#93#
   );
   FIPS_136  : constant Byte_Seq := (
      16#bb#, 16#84#, 16#a0#, 16#14#, 16#cd#, 16#17#, 16#cc#, 16#23#, 
      16#2c#, 16#98#, 16#ae#, 16#8b#, 16#07#, 16#09#, 16#91#, 16#7e#, 
      16#9d#
   );
   FIPS_144  : constant Byte_Seq := (
      16#c3#, 16#41#, 16#1a#, 16#05#, 16#92#, 16#f1#, 16#f4#, 16#fa#, 
      16#69#, 16#88#, 16#15#, 16#23#, 16#89#, 16#97#, 16#db#, 16#35#, 
      16#64#, 16#18#
   );
   FIPS_152  : constant Byte_Seq := (
      16#e8#, 16#31#, 16#b7#, 16#39#, 16#e8#, 16#eb#, 16#9f#, 16#78#, 
      16#7f#, 16#63#, 16#c0#, 16#bb#, 16#07#, 16#1d#, 16#dc#, 16#c9#, 
      16#f4#, 16#4c#, 16#ab#
   );
   FIPS_160  : constant Byte_Seq := (
      16#b8#, 16#a7#, 16#bb#, 16#cc#, 16#de#, 16#46#, 16#e8#, 16#5f#, 
      16#12#, 16#23#, 16#23#, 16#7d#, 16#93#, 16#53#, 16#b7#, 16#8c#, 
      16#3b#, 16#19#, 16#72#, 16#7b#
   );
   FIPS_168  : constant Byte_Seq := (
      16#cf#, 16#39#, 16#1b#, 16#8a#, 16#ab#, 16#ec#, 16#6f#, 16#81#, 
      16#28#, 16#8c#, 16#8b#, 16#7b#, 16#92#, 16#84#, 16#3b#, 16#e2#, 
      16#3d#, 16#2e#, 16#84#, 16#75#, 16#74#
   );
   FIPS_176  : constant Byte_Seq := (
      16#9d#, 16#65#, 16#d8#, 16#8b#, 16#ff#, 16#ed#, 16#76#, 16#4c#, 
      16#28#, 16#6f#, 16#34#, 16#89#, 16#4f#, 16#99#, 16#16#, 16#00#, 
      16#d1#, 16#a6#, 16#7d#, 16#62#, 16#23#, 16#82#
   );
   FIPS_184  : constant Byte_Seq := (
      16#ba#, 16#b6#, 16#ea#, 16#46#, 16#fb#, 16#71#, 16#7f#, 16#73#, 
      16#f0#, 16#62#, 16#81#, 16#32#, 16#a2#, 16#b9#, 16#6b#, 16#e3#, 
      16#83#, 16#77#, 16#4f#, 16#1e#, 16#5d#, 16#8b#, 16#6d#
   );
   FIPS_192  : constant Byte_Seq := (
      16#88#, 16#53#, 16#b0#, 16#0e#, 16#86#, 16#97#, 16#64#, 16#ad#, 
      16#b5#, 16#27#, 16#a0#, 16#7b#, 16#07#, 16#3c#, 16#85#, 16#a2#, 
      16#4e#, 16#6c#, 16#20#, 16#8b#, 16#a4#, 16#7e#, 16#ef#, 16#4e#
   );
   FIPS_200  : constant Byte_Seq := (
      16#71#, 16#fe#, 16#1b#, 16#a5#, 16#d2#, 16#99#, 16#49#, 16#5d#, 
      16#2a#, 16#56#, 16#03#, 16#9c#, 16#64#, 16#03#, 16#2e#, 16#c6#, 
      16#26#, 16#3d#, 16#43#, 16#7f#, 16#55#, 16#e3#, 16#f5#, 16#be#, 
      16#db#
   );
   FIPS_208  : constant Byte_Seq := (
      16#4e#, 16#be#, 16#07#, 16#d0#, 16#3c#, 16#93#, 16#e8#, 16#49#, 
      16#b4#, 16#bb#, 16#fe#, 16#9f#, 16#2d#, 16#22#, 16#94#, 16#bf#, 
      16#6c#, 16#ca#, 16#b4#, 16#57#, 16#f7#, 16#6d#, 16#3f#, 16#99#, 
      16#cb#, 16#64#
   );
   FIPS_216  : constant Byte_Seq := (
      16#91#, 16#8a#, 16#c0#, 16#a9#, 16#7e#, 16#c1#, 16#63#, 16#29#, 
      16#08#, 16#48#, 16#9e#, 16#52#, 16#42#, 16#ba#, 16#28#, 16#4b#, 
      16#c8#, 16#11#, 16#aa#, 16#71#, 16#97#, 16#24#, 16#2c#, 16#f7#, 
      16#22#, 16#6f#, 16#cd#
   );
   FIPS_224  : constant Byte_Seq := (
      16#97#, 16#47#, 16#7f#, 16#72#, 16#72#, 16#d8#, 16#a8#, 16#9e#, 
      16#38#, 16#e7#, 16#96#, 16#c5#, 16#33#, 16#e9#, 16#f8#, 16#a8#, 
      16#ae#, 16#4c#, 16#92#, 16#cc#, 16#aa#, 16#5d#, 16#90#, 16#7e#, 
      16#d2#, 16#6a#, 16#1a#, 16#15#
   );
   FIPS_232  : constant Byte_Seq := (
      16#71#, 16#8e#, 16#0c#, 16#fe#, 16#13#, 16#86#, 16#cb#, 16#14#, 
      16#21#, 16#b4#, 16#79#, 16#9b#, 16#15#, 16#78#, 16#8b#, 16#86#, 
      16#2b#, 16#f0#, 16#3a#, 16#80#, 16#72#, 16#bb#, 16#30#, 16#d0#, 
      16#23#, 16#03#, 16#88#, 16#80#, 16#32#
   );
   FIPS_240  : constant Byte_Seq := (
      16#d3#, 16#b0#, 16#7f#, 16#0f#, 16#d5#, 16#d4#, 16#cd#, 16#31#, 
      16#88#, 16#ae#, 16#ad#, 16#8d#, 16#c8#, 16#33#, 16#8d#, 16#e4#, 
      16#20#, 16#56#, 16#e2#, 16#e8#, 16#48#, 16#7e#, 16#ca#, 16#51#, 
      16#ec#, 16#37#, 16#ef#, 16#2d#, 16#af#, 16#27#
   );
   FIPS_248  : constant Byte_Seq := (
      16#69#, 16#5b#, 16#9e#, 16#fe#, 16#18#, 16#09#, 16#ab#, 16#d5#, 
      16#d4#, 16#4e#, 16#ae#, 16#95#, 16#7d#, 16#df#, 16#9c#, 16#2c#, 
      16#d3#, 16#c7#, 16#5f#, 16#ae#, 16#2f#, 16#52#, 16#28#, 16#55#, 
      16#71#, 16#2a#, 16#07#, 16#c6#, 16#39#, 16#c0#, 16#b9#
   );
   FIPS_256  : constant Byte_Seq := (
      16#be#, 16#01#, 16#e5#, 16#20#, 16#e6#, 16#9f#, 16#04#, 16#17#, 
      16#4c#, 16#cf#, 16#95#, 16#45#, 16#5b#, 16#1c#, 16#81#, 16#44#, 
      16#52#, 16#98#, 16#26#, 16#4d#, 16#9a#, 16#dc#, 16#49#, 16#58#, 
      16#57#, 16#4a#, 16#52#, 16#84#, 16#3d#, 16#95#, 16#b8#, 16#ba# 
   );
   FIPS_264  : constant Byte_Seq := (
      16#98#, 16#ef#, 16#73#, 16#01#, 16#f9#, 16#57#, 16#d7#, 16#3d#, 
      16#4e#, 16#82#, 16#1d#, 16#58#, 16#73#, 16#e8#, 16#a9#, 16#b5#, 
      16#97#, 16#0f#, 16#bd#, 16#21#, 16#9d#, 16#5c#, 16#f7#, 16#4e#, 
      16#c2#, 16#29#, 16#1b#, 16#83#, 16#81#, 16#18#, 16#13#, 16#91#, 
      16#b4#
   );
   FIPS_272  : constant Byte_Seq := (
      16#87#, 16#3b#, 16#a7#, 16#f8#, 16#b7#, 16#15#, 16#17#, 16#ec#, 
      16#50#, 16#29#, 16#7b#, 16#21#, 16#cf#, 16#94#, 16#cd#, 16#b7#, 
      16#a5#, 16#8a#, 16#bb#, 16#b8#, 16#82#, 16#92#, 16#06#, 16#f0#, 
      16#d3#, 16#f3#, 16#28#, 16#ff#, 16#8a#, 16#69#, 16#39#, 16#ac#, 
      16#1d#, 16#1d#
   );
   FIPS_280  : constant Byte_Seq := (
      16#e3#, 16#bd#, 16#4b#, 16#c3#, 16#a6#, 16#0c#, 16#dd#, 16#d2#, 
      16#6c#, 16#20#, 16#aa#, 16#86#, 16#36#, 16#4b#, 16#d4#, 16#4f#, 
      16#4a#, 16#07#, 16#f3#, 16#30#, 16#28#, 16#25#, 16#ad#, 16#0a#, 
      16#c1#, 16#27#, 16#88#, 16#1d#, 16#e4#, 16#ea#, 16#fb#, 16#cc#, 
      16#f9#, 16#88#, 16#cb#
   );
   FIPS_288  : constant Byte_Seq := (
      16#87#, 16#16#, 16#e4#, 16#b8#, 16#6d#, 16#ef#, 16#f9#, 16#da#, 
      16#2a#, 16#8e#, 16#d5#, 16#5b#, 16#aa#, 16#43#, 16#58#, 16#2a#, 
      16#75#, 16#86#, 16#ec#, 16#9c#, 16#d3#, 16#8a#, 16#c3#, 16#a9#, 
      16#33#, 16#15#, 16#61#, 16#58#, 16#cd#, 16#8e#, 16#5b#, 16#78#, 
      16#87#, 16#58#, 16#5e#, 16#91#
   );
   FIPS_296  : constant Byte_Seq := (
      16#f8#, 16#a5#, 16#03#, 16#aa#, 16#a2#, 16#5e#, 16#f2#, 16#ce#, 
      16#a2#, 16#5e#, 16#31#, 16#93#, 16#0c#, 16#3a#, 16#90#, 16#db#, 
      16#46#, 16#8c#, 16#d3#, 16#a8#, 16#62#, 16#f4#, 16#a9#, 16#3a#, 
      16#ab#, 16#5d#, 16#e2#, 16#77#, 16#7e#, 16#82#, 16#dc#, 16#90#, 
      16#5c#, 16#b0#, 16#3e#, 16#e2#, 16#3c#
   );
   FIPS_304  : constant Byte_Seq := (
      16#66#, 16#90#, 16#25#, 16#17#, 16#5e#, 16#a9#, 16#17#, 16#cd#, 
      16#d7#, 16#a7#, 16#1f#, 16#f4#, 16#ec#, 16#0c#, 16#45#, 16#bf#, 
      16#12#, 16#46#, 16#d2#, 16#a6#, 16#f0#, 16#31#, 16#c0#, 16#0b#, 
      16#71#, 16#de#, 16#70#, 16#1e#, 16#17#, 16#93#, 16#9b#, 16#fe#, 
      16#92#, 16#12#, 16#8b#, 16#21#, 16#91#, 16#1e#
   );
   FIPS_312  : constant Byte_Seq := (
      16#b3#, 16#5f#, 16#b2#, 16#26#, 16#2e#, 16#df#, 16#a1#, 16#49#, 
      16#38#, 16#a0#, 16#fb#, 16#a0#, 16#3e#, 16#b2#, 16#a2#, 16#5d#, 
      16#37#, 16#79#, 16#74#, 16#b1#, 16#1f#, 16#55#, 16#64#, 16#91#, 
      16#a7#, 16#81#, 16#d0#, 16#ba#, 16#2b#, 16#3c#, 16#0f#, 16#f3#, 
      16#e4#, 16#27#, 16#49#, 16#92#, 16#5f#, 16#ef#, 16#8b#
   );
   FIPS_320  : constant Byte_Seq := (
      16#9d#, 16#86#, 16#b4#, 16#5d#, 16#f8#, 16#d7#, 16#da#, 16#e0#, 
      16#cf#, 16#6b#, 16#0b#, 16#c2#, 16#08#, 16#66#, 16#6e#, 16#e1#, 
      16#16#, 16#3a#, 16#39#, 16#e6#, 16#11#, 16#6d#, 16#6d#, 16#24#, 
      16#0c#, 16#9d#, 16#c1#, 16#c3#, 16#a3#, 16#c1#, 16#db#, 16#1d#, 
      16#d3#, 16#b1#, 16#c6#, 16#68#, 16#0f#, 16#e9#, 16#a1#, 16#96#
   );
   FIPS_328  : constant Byte_Seq := (
      16#41#, 16#4f#, 16#56#, 16#19#, 16#f6#, 16#df#, 16#d4#, 16#58#, 
      16#53#, 16#bb#, 16#ab#, 16#d2#, 16#24#, 16#cc#, 16#30#, 16#5d#, 
      16#77#, 16#35#, 16#0a#, 16#d2#, 16#53#, 16#35#, 16#89#, 16#10#, 
      16#a7#, 16#4f#, 16#3a#, 16#43#, 16#81#, 16#a9#, 16#b8#, 16#66#, 
      16#80#, 16#b3#, 16#c4#, 16#06#, 16#8c#, 16#08#, 16#98#, 16#49#, 
      16#c4#
   ); 
   FIPS_336  : constant Byte_Seq := (
      16#e2#, 16#65#, 16#83#, 16#24#, 16#82#, 16#1a#, 16#e7#, 16#b0#, 
      16#fa#, 16#a0#, 16#cd#, 16#d6#, 16#3e#, 16#e9#, 16#ef#, 16#b9#, 
      16#fc#, 16#be#, 16#82#, 16#09#, 16#2d#, 16#04#, 16#69#, 16#6f#, 
      16#eb#, 16#3d#, 16#a9#, 16#2c#, 16#82#, 16#52#, 16#1d#, 16#fd#, 
      16#c9#, 16#8f#, 16#6b#, 16#41#, 16#b3#, 16#ef#, 16#36#, 16#5d#, 
      16#21#, 16#9a#
   );
   FIPS_344  : constant Byte_Seq := (
      16#7e#, 16#80#, 16#27#, 16#1b#, 16#b5#, 16#f2#, 16#cc#, 16#7d#, 
      16#da#, 16#e4#, 16#15#, 16#86#, 16#58#, 16#e4#, 16#e8#, 16#d0#, 
      16#6e#, 16#04#, 16#a3#, 16#93#, 16#85#, 16#da#, 16#0e#, 16#ca#, 
      16#c1#, 16#cb#, 16#8e#, 16#91#, 16#d6#, 16#8a#, 16#9b#, 16#d2#, 
      16#1d#, 16#db#, 16#73#, 16#20#, 16#e7#, 16#9d#, 16#10#, 16#e3#, 
      16#11#, 16#07#, 16#58#
   );
   FIPS_352  : constant Byte_Seq := (
      16#43#, 16#d2#, 16#82#, 16#8e#, 16#86#, 16#f7#, 16#85#, 16#6b#, 
      16#78#, 16#c6#, 16#6c#, 16#fa#, 16#3d#, 16#60#, 16#23#, 16#87#, 
      16#c2#, 16#90#, 16#97#, 16#5a#, 16#fd#, 16#02#, 16#1a#, 16#8b#, 
      16#76#, 16#af#, 16#09#, 16#18#, 16#06#, 16#9c#, 16#ac#, 16#35#, 
      16#de#, 16#c4#, 16#5d#, 16#e3#, 16#cc#, 16#52#, 16#ed#, 16#c4#, 
      16#ba#, 16#14#, 16#43#, 16#2e#
   );
   FIPS_360  : constant Byte_Seq := (
      16#3f#, 16#49#, 16#bb#, 16#64#, 16#5c#, 16#ce#, 16#d7#, 16#53#, 
      16#0b#, 16#8b#, 16#82#, 16#e6#, 16#cf#, 16#07#, 16#fb#, 16#f6#, 
      16#70#, 16#f7#, 16#ef#, 16#0b#, 16#a0#, 16#58#, 16#3d#, 16#16#, 
      16#de#, 16#ba#, 16#fc#, 16#63#, 16#9b#, 16#df#, 16#bf#, 16#c9#, 
      16#9b#, 16#84#, 16#17#, 16#24#, 16#9f#, 16#7f#, 16#5a#, 16#05#, 
      16#41#, 16#0a#, 16#a3#, 16#a7#, 16#1f#
   );
   FIPS_368  : constant Byte_Seq := (
      16#31#, 16#aa#, 16#c0#, 16#6a#, 16#59#, 16#b7#, 16#4b#, 16#f4#, 
      16#78#, 16#61#, 16#7c#, 16#16#, 16#37#, 16#fa#, 16#6c#, 16#55#, 
      16#93#, 16#df#, 16#16#, 16#8b#, 16#8d#, 16#58#, 16#b1#, 16#e9#, 
      16#23#, 16#bf#, 16#3e#, 16#3d#, 16#80#, 16#e5#, 16#5d#, 16#71#, 
      16#70#, 16#b1#, 16#64#, 16#54#, 16#16#, 16#0a#, 16#b2#, 16#9e#, 
      16#e1#, 16#f7#, 16#41#, 16#2e#, 16#bc#, 16#05#
   );
   FIPS_376  : constant Byte_Seq := (
      16#c1#, 16#0b#, 16#28#, 16#52#, 16#05#, 16#4d#, 16#80#, 16#34#, 
      16#e0#, 16#79#, 16#06#, 16#c7#, 16#fc#, 16#e3#, 16#ce#, 16#99#, 
      16#40#, 16#23#, 16#21#, 16#a6#, 16#48#, 16#bb#, 16#88#, 16#1f#, 
      16#13#, 16#fb#, 16#27#, 16#6a#, 16#fc#, 16#22#, 16#4c#, 16#6a#, 
      16#ec#, 16#c6#, 16#48#, 16#00#, 16#cd#, 16#76#, 16#7e#, 16#d2#, 
      16#42#, 16#9d#, 16#b9#, 16#4b#, 16#95#, 16#a9#, 16#c3#
   );
   FIPS_384  : constant Byte_Seq := (
      16#b1#, 16#ee#, 16#ef#, 16#32#, 16#4b#, 16#49#, 16#9f#, 16#19#, 
      16#eb#, 16#a3#, 16#22#, 16#21#, 16#5f#, 16#e3#, 16#ce#, 16#19#, 
      16#c9#, 16#f0#, 16#00#, 16#b6#, 16#98#, 16#d2#, 16#b2#, 16#da#, 
      16#b7#, 16#14#, 16#50#, 16#15#, 16#04#, 16#6c#, 16#c8#, 16#6d#, 
      16#04#, 16#9e#, 16#e1#, 16#5a#, 16#d5#, 16#9d#, 16#cd#, 16#15#, 
      16#64#, 16#f3#, 16#01#, 16#12#, 16#e0#, 16#64#, 16#44#, 16#cb#
   );
   FIPS_392  : constant Byte_Seq := (
      16#79#, 16#0d#, 16#bb#, 16#a0#, 16#99#, 16#65#, 16#c9#, 16#77#, 
      16#4d#, 16#d6#, 16#0a#, 16#32#, 16#e0#, 16#10#, 16#c5#, 16#0d#, 
      16#6d#, 16#51#, 16#89#, 16#68#, 16#a2#, 16#20#, 16#14#, 16#1d#, 
      16#c3#, 16#3e#, 16#74#, 16#10#, 16#f2#, 16#da#, 16#6c#, 16#08#, 
      16#ad#, 16#04#, 16#19#, 16#bd#, 16#98#, 16#64#, 16#d5#, 16#32#, 
      16#7d#, 16#2c#, 16#5c#, 16#44#, 16#91#, 16#4b#, 16#2e#, 16#83#, 
      16#f9#
   );
   FIPS_400  : constant Byte_Seq := (
      16#f7#, 16#b5#, 16#77#, 16#f1#, 16#39#, 16#6b#, 16#23#, 16#c2#, 
      16#7e#, 16#b6#, 16#37#, 16#e5#, 16#3d#, 16#3d#, 16#92#, 16#46#, 
      16#02#, 16#70#, 16#b0#, 16#01#, 16#cc#, 16#61#, 16#2f#, 16#d3#, 
      16#b4#, 16#d6#, 16#8b#, 16#cd#, 16#d0#, 16#9c#, 16#2d#, 16#50#, 
      16#57#, 16#1e#, 16#a4#, 16#35#, 16#06#, 16#36#, 16#32#, 16#4c#, 
      16#c2#, 16#42#, 16#8a#, 16#08#, 16#7e#, 16#7b#, 16#d8#, 16#78#, 
      16#5f#, 16#82#
   );
   FIPS_408  : constant Byte_Seq := (
      16#73#, 16#70#, 16#d9#, 16#b4#, 16#53#, 16#93#, 16#69#, 16#55#, 
      16#b9#, 16#c9#, 16#d3#, 16#36#, 16#f4#, 16#b2#, 16#83#, 16#23#, 
      16#79#, 16#86#, 16#23#, 16#2d#, 16#e0#, 16#07#, 16#bf#, 16#41#, 
      16#2f#, 16#b4#, 16#26#, 16#ff#, 16#5b#, 16#40#, 16#93#, 16#c8#, 
      16#0c#, 16#42#, 16#8c#, 16#19#, 16#a1#, 16#2e#, 16#0b#, 16#18#, 
      16#74#, 16#84#, 16#dc#, 16#6d#, 16#5f#, 16#47#, 16#46#, 16#53#, 
      16#7f#, 16#b1#, 16#ed#
   );
   FIPS_416  : constant Byte_Seq := (
      16#e8#, 16#62#, 16#01#, 16#70#, 16#f0#, 16#f3#, 16#93#, 16#28#, 
      16#bd#, 16#f8#, 16#88#, 16#81#, 16#48#, 16#cf#, 16#d1#, 16#77#, 
      16#30#, 16#f3#, 16#14#, 16#ea#, 16#68#, 16#d8#, 16#fe#, 16#a0#, 
      16#2d#, 16#16#, 16#d9#, 16#8a#, 16#3c#, 16#ca#, 16#61#, 16#48#, 
      16#41#, 16#39#, 16#d3#, 16#ee#, 16#92#, 16#b7#, 16#48#, 16#09#, 
      16#1d#, 16#c8#, 16#41#, 16#dd#, 16#a0#, 16#84#, 16#83#, 16#f1#, 
      16#18#, 16#40#, 16#25#, 16#ce#
   );
   FIPS_424  : constant Byte_Seq := (
      16#75#, 16#d4#, 16#21#, 16#6b#, 16#ad#, 16#77#, 16#94#, 16#3b#, 
      16#fe#, 16#82#, 16#be#, 16#21#, 16#61#, 16#57#, 16#84#, 16#3b#, 
      16#0d#, 16#a0#, 16#fd#, 16#16#, 16#ee#, 16#ee#, 16#84#, 16#71#, 
      16#53#, 16#a0#, 16#0b#, 16#43#, 16#e7#, 16#07#, 16#b2#, 16#ff#, 
      16#e2#, 16#c8#, 16#98#, 16#16#, 16#80#, 16#81#, 16#f0#, 16#bd#, 
      16#b3#, 16#af#, 16#58#, 16#f2#, 16#14#, 16#cf#, 16#67#, 16#b9#, 
      16#20#, 16#c3#, 16#85#, 16#ac#, 16#a1#
   );
   FIPS_432  : constant Byte_Seq := (
      16#2f#, 16#a9#, 16#0c#, 16#22#, 16#10#, 16#e3#, 16#09#, 16#6c#, 
      16#ae#, 16#d1#, 16#22#, 16#b7#, 16#4e#, 16#b9#, 16#55#, 16#99#, 
      16#77#, 16#12#, 16#0e#, 16#5d#, 16#9a#, 16#97#, 16#ee#, 16#b3#, 
      16#f9#, 16#9b#, 16#cb#, 16#a6#, 16#c1#, 16#9c#, 16#f8#, 16#cf#, 
      16#79#, 16#1a#, 16#c6#, 16#c8#, 16#a0#, 16#a9#, 16#4a#, 16#e4#, 
      16#92#, 16#46#, 16#61#, 16#1d#, 16#ac#, 16#e7#, 16#f2#, 16#4e#, 
      16#b0#, 16#56#, 16#73#, 16#a3#, 16#6b#, 16#3e#
   );
   FIPS_440  : constant Byte_Seq := (
      16#a8#, 16#de#, 16#55#, 16#17#, 16#0c#, 16#6d#, 16#c0#, 16#d8#, 
      16#0d#, 16#e3#, 16#2f#, 16#50#, 16#8b#, 16#f4#, 16#9b#, 16#70#, 
      16#46#, 16#ae#, 16#ea#, 16#4b#, 16#97#, 16#5a#, 16#51#, 16#1b#, 
      16#5e#, 16#a3#, 16#dc#, 16#85#, 16#3b#, 16#fa#, 16#4b#, 16#1e#, 
      16#01#, 16#38#, 16#20#, 16#2d#, 16#67#, 16#85#, 16#f6#, 16#b3#, 
      16#01#, 16#79#, 16#14#, 16#a8#, 16#6f#, 16#82#, 16#42#, 16#88#, 
      16#d5#, 16#86#, 16#dc#, 16#0e#, 16#8b#, 16#c9#, 16#24#
   );
   FIPS_448  : constant Byte_Seq := (
      16#ac#, 16#cd#, 16#9d#, 16#05#, 16#fb#, 16#7e#, 16#f3#, 16#04#, 
      16#34#, 16#70#, 16#83#, 16#61#, 16#37#, 16#55#, 16#4a#, 16#f1#, 
      16#17#, 16#44#, 16#0b#, 16#3c#, 16#cc#, 16#a7#, 16#a2#, 16#80#, 
      16#28#, 16#54#, 16#94#, 16#f9#, 16#0d#, 16#fa#, 16#ea#, 16#60#, 
      16#dc#, 16#bf#, 16#40#, 16#b2#, 16#30#, 16#27#, 16#19#, 16#32#, 
      16#cd#, 16#38#, 16#75#, 16#b1#, 16#d3#, 16#dc#, 16#a6#, 16#0d#, 
      16#38#, 16#86#, 16#5f#, 16#f8#, 16#74#, 16#18#, 16#0e#, 16#fa#
   );
   FIPS_456  : constant Byte_Seq := (
      16#32#, 16#b8#, 16#35#, 16#c1#, 16#80#, 16#cc#, 16#40#, 16#06#, 
      16#c1#, 16#1a#, 16#61#, 16#c6#, 16#5b#, 16#03#, 16#c0#, 16#99#, 
      16#51#, 16#0e#, 16#1d#, 16#4f#, 16#0a#, 16#94#, 16#b6#, 16#3d#, 
      16#54#, 16#bd#, 16#6b#, 16#d5#, 16#a8#, 16#ab#, 16#20#, 16#7a#, 
      16#b0#, 16#f4#, 16#63#, 16#92#, 16#06#, 16#56#, 16#4e#, 16#dc#, 
      16#3f#, 16#a6#, 16#af#, 16#03#, 16#28#, 16#0a#, 16#67#, 16#74#, 
      16#4f#, 16#68#, 16#10#, 16#6d#, 16#c5#, 16#1e#, 16#e3#, 16#57#, 
      16#23#
   );
   FIPS_464  : constant Byte_Seq := (
      16#94#, 16#09#, 16#f9#, 16#ef#, 16#ad#, 16#bf#, 16#19#, 16#0b#, 
      16#25#, 16#33#, 16#67#, 16#62#, 16#9f#, 16#8f#, 16#36#, 16#8c#, 
      16#9d#, 16#5a#, 16#c2#, 16#62#, 16#e9#, 16#4a#, 16#b8#, 16#6f#, 
      16#35#, 16#59#, 16#f9#, 16#a1#, 16#fe#, 16#1a#, 16#9b#, 16#44#, 
      16#b6#, 16#4e#, 16#31#, 16#31#, 16#21#, 16#b3#, 16#4d#, 16#43#, 
      16#00#, 16#1c#, 16#43#, 16#0b#, 16#ed#, 16#c6#, 16#2f#, 16#c5#, 
      16#86#, 16#ea#, 16#39#, 16#8a#, 16#cd#, 16#8f#, 16#17#, 16#c7#, 
      16#cf#, 16#a2#
   );
   FIPS_472  : constant Byte_Seq := (
      16#28#, 16#95#, 16#86#, 16#ba#, 16#f8#, 16#da#, 16#ce#, 16#d5#, 
      16#0d#, 16#b1#, 16#4c#, 16#93#, 16#65#, 16#29#, 16#a0#, 16#a6#, 
      16#43#, 16#8e#, 16#b5#, 16#da#, 16#8d#, 16#3d#, 16#46#, 16#91#, 
      16#72#, 16#b6#, 16#a0#, 16#6f#, 16#4f#, 16#f3#, 16#a9#, 16#56#, 
      16#d4#, 16#f9#, 16#21#, 16#95#, 16#63#, 16#ac#, 16#28#, 16#5c#, 
      16#b8#, 16#e7#, 16#00#, 16#74#, 16#cf#, 16#cc#, 16#15#, 16#2c#, 
      16#02#, 16#59#, 16#3a#, 16#97#, 16#73#, 16#3c#, 16#36#, 16#f4#, 
      16#a9#, 16#e9#, 16#7f#
   );
   FIPS_480  : constant Byte_Seq := (
      16#15#, 16#65#, 16#30#, 16#cd#, 16#6e#, 16#d3#, 16#ba#, 16#f1#, 
      16#fd#, 16#72#, 16#32#, 16#c7#, 16#ff#, 16#20#, 16#4f#, 16#3c#, 
      16#7d#, 16#4d#, 16#10#, 16#60#, 16#16#, 16#af#, 16#a3#, 16#bd#, 
      16#ff#, 16#37#, 16#86#, 16#e8#, 16#48#, 16#43#, 16#ec#, 16#55#, 
      16#61#, 16#15#, 16#62#, 16#6f#, 16#dc#, 16#84#, 16#b2#, 16#e8#, 
      16#74#, 16#f1#, 16#07#, 16#4e#, 16#4f#, 16#7d#, 16#53#, 16#e0#, 
      16#80#, 16#79#, 16#ee#, 16#9f#, 16#d0#, 16#1f#, 16#80#, 16#a8#, 
      16#be#, 16#7f#, 16#20#, 16#c0#
   );
   FIPS_488  : constant Byte_Seq := (
      16#30#, 16#65#, 16#5a#, 16#6b#, 16#5a#, 16#59#, 16#65#, 16#db#, 
      16#99#, 16#2e#, 16#72#, 16#48#, 16#d2#, 16#41#, 16#41#, 16#05#, 
      16#5e#, 16#98#, 16#8d#, 16#72#, 16#6a#, 16#bb#, 16#8e#, 16#72#, 
      16#9d#, 16#c5#, 16#c2#, 16#1f#, 16#fc#, 16#ba#, 16#ed#, 16#bc#, 
      16#0b#, 16#1b#, 16#5f#, 16#ea#, 16#35#, 16#b8#, 16#75#, 16#1f#, 
      16#6e#, 16#c6#, 16#62#, 16#55#, 16#17#, 16#31#, 16#2f#, 16#ff#, 
      16#22#, 16#34#, 16#01#, 16#41#, 16#76#, 16#26#, 16#9b#, 16#60#, 
      16#95#, 16#97#, 16#23#, 16#78#, 16#7c#
   );
   FIPS_496  : constant Byte_Seq := (
      16#34#, 16#5c#, 16#3c#, 16#02#, 16#2e#, 16#20#, 16#14#, 16#4e#, 
      16#13#, 16#56#, 16#04#, 16#07#, 16#87#, 16#62#, 16#ef#, 16#5c#, 
      16#8a#, 16#8f#, 16#03#, 16#8c#, 16#f1#, 16#b1#, 16#d6#, 16#a9#, 
      16#17#, 16#09#, 16#b5#, 16#9d#, 16#d0#, 16#68#, 16#39#, 16#6a#, 
      16#9e#, 16#97#, 16#1a#, 16#b6#, 16#28#, 16#f7#, 16#48#, 16#86#, 
      16#e7#, 16#65#, 16#38#, 16#4a#, 16#23#, 16#60#, 16#7c#, 16#1a#, 
      16#1e#, 16#6e#, 16#97#, 16#3f#, 16#8f#, 16#bb#, 16#0f#, 16#f5#, 
      16#51#, 16#04#, 16#c4#, 16#6f#, 16#5d#, 16#b3#
   );
   FIPS_504  : constant Byte_Seq := (
      16#0b#, 16#94#, 16#a0#, 16#f4#, 16#3a#, 16#92#, 16#40#, 16#89#, 
      16#63#, 16#a5#, 16#9d#, 16#ed#, 16#01#, 16#a9#, 16#33#, 16#82#, 
      16#83#, 16#a6#, 16#ff#, 16#1b#, 16#fb#, 16#ac#, 16#d9#, 16#05#, 
      16#1a#, 16#01#, 16#04#, 16#44#, 16#5c#, 16#7f#, 16#04#, 16#1e#, 
      16#80#, 16#37#, 16#af#, 16#de#, 16#3b#, 16#5a#, 16#87#, 16#d2#, 
      16#2d#, 16#5a#, 16#47#, 16#96#, 16#14#, 16#4c#, 16#bc#, 16#94#, 
      16#40#, 16#91#, 16#d6#, 16#cc#, 16#47#, 16#b5#, 16#ff#, 16#d1#, 
      16#f9#, 16#97#, 16#ab#, 16#14#, 16#96#, 16#ca#, 16#31#
   );
   FIPS_512  : constant Byte_Seq := (
      16#93#, 16#03#, 16#5d#, 16#3a#, 16#13#, 16#ae#, 16#1b#, 16#06#, 
      16#dd#, 16#03#, 16#3e#, 16#76#, 16#4a#, 16#ca#, 16#01#, 16#24#, 
      16#96#, 16#1d#, 16#a7#, 16#9c#, 16#36#, 16#6c#, 16#6c#, 16#75#, 
      16#6b#, 16#c4#, 16#bc#, 16#c1#, 16#18#, 16#50#, 16#a3#, 16#a8#, 
      16#d1#, 16#20#, 16#85#, 16#4f#, 16#34#, 16#29#, 16#0f#, 16#ff#, 
      16#7c#, 16#8d#, 16#6d#, 16#83#, 16#53#, 16#1d#, 16#bd#, 16#d1#, 
      16#e8#, 16#1c#, 16#c4#, 16#ed#, 16#42#, 16#46#, 16#e0#, 16#0b#, 
      16#d4#, 16#11#, 16#3e#, 16#f4#, 16#51#, 16#33#, 16#4d#, 16#aa#
   );
   FIPS_520  : constant Byte_Seq := (
      16#bf#, 16#b9#, 16#4d#, 16#fb#, 16#e0#, 16#d9#, 16#a5#, 16#09#, 
      16#b7#, 16#8d#, 16#16#, 16#4a#, 16#72#, 16#20#, 16#50#, 16#05#, 
      16#4d#, 16#ad#, 16#91#, 16#c9#, 16#a8#, 16#e2#, 16#60#, 16#54#, 
      16#5d#, 16#03#, 16#7e#, 16#b4#, 16#50#, 16#32#, 16#1a#, 16#ac#, 
      16#48#, 16#ed#, 16#44#, 16#59#, 16#fd#, 16#d8#, 16#a4#, 16#15#, 
      16#72#, 16#bd#, 16#6c#, 16#9c#, 16#84#, 16#d1#, 16#8b#, 16#6e#, 
      16#c3#, 16#39#, 16#24#, 16#74#, 16#82#, 16#cc#, 16#3e#, 16#e5#, 
      16#2a#, 16#1b#, 16#bd#, 16#6b#, 16#d4#, 16#ae#, 16#91#, 16#82#,
      16#16#
   );
   FIPS_528  : constant Byte_Seq := (
      16#1c#, 16#89#, 16#24#, 16#a1#, 16#6f#, 16#a7#, 16#c6#, 16#02#, 
      16#af#, 16#f5#, 16#ee#, 16#96#, 16#17#, 16#98#, 16#bd#, 16#44#, 
      16#fe#, 16#53#, 16#79#, 16#8b#, 16#f4#, 16#4c#, 16#3d#, 16#6b#, 
      16#0d#, 16#13#, 16#ef#, 16#83#, 16#7d#, 16#e0#, 16#73#, 16#77#, 
      16#65#, 16#1c#, 16#1e#, 16#94#, 16#ed#, 16#23#, 16#6e#, 16#b7#, 
      16#93#, 16#49#, 16#f8#, 16#6a#, 16#c3#, 16#1b#, 16#a1#, 16#51#, 
      16#a7#, 16#e7#, 16#11#, 16#c5#, 16#40#, 16#7e#, 16#65#, 16#be#, 
      16#b6#, 16#38#, 16#24#, 16#f6#, 16#ec#, 16#39#, 16#75#, 16#4b#, 
      16#58#, 16#f3#
   );
   FIPS_536  : constant Byte_Seq := (
      16#18#, 16#42#, 16#15#, 16#14#, 16#5d#, 16#a4#, 16#9d#, 16#b4#, 
      16#17#, 16#e8#, 16#bd#, 16#d5#, 16#73#, 16#d6#, 16#28#, 16#2d#, 
      16#e0#, 16#73#, 16#e6#, 16#74#, 16#c3#, 16#de#, 16#a8#, 16#6b#, 
      16#6c#, 16#78#, 16#59#, 16#1d#, 16#49#, 16#47#, 16#f5#, 16#65#, 
      16#5a#, 16#9d#, 16#9e#, 16#b0#, 16#e5#, 16#f4#, 16#ed#, 16#04#, 
      16#6b#, 16#1d#, 16#86#, 16#42#, 16#da#, 16#9a#, 16#ef#, 16#a8#, 
      16#04#, 16#48#, 16#a2#, 16#99#, 16#50#, 16#41#, 16#60#, 16#a1#, 
      16#b0#, 16#00#, 16#c9#, 16#b4#, 16#d3#, 16#c6#, 16#2a#, 16#b6#, 
      16#9b#, 16#3d#, 16#96#
   );
   FIPS_544  : constant Byte_Seq := (
      16#ca#, 16#7a#, 16#63#, 16#ad#, 16#f4#, 16#1f#, 16#4d#, 16#a3#, 
      16#31#, 16#42#, 16#91#, 16#0c#, 16#96#, 16#77#, 16#06#, 16#b5#, 
      16#c8#, 16#a0#, 16#93#, 16#35#, 16#0e#, 16#b3#, 16#e6#, 16#d3#, 
      16#aa#, 16#be#, 16#69#, 16#a4#, 16#6a#, 16#28#, 16#72#, 16#f4#, 
      16#7a#, 16#39#, 16#bb#, 16#e7#, 16#7c#, 16#dc#, 16#11#, 16#60#, 
      16#da#, 16#a4#, 16#50#, 16#22#, 16#5b#, 16#0e#, 16#8e#, 16#36#, 
      16#f5#, 16#06#, 16#97#, 16#8c#, 16#e3#, 16#ac#, 16#9a#, 16#e5#, 
      16#f7#, 16#57#, 16#21#, 16#ef#, 16#30#, 16#da#, 16#46#, 16#b2#, 
      16#8f#, 16#07#, 16#24#, 16#2c#
   );
   FIPS_552  : constant Byte_Seq := (
      16#1d#, 16#a4#, 16#1a#, 16#0a#, 16#f2#, 16#02#, 16#b0#, 16#79#, 
      16#52#, 16#1d#, 16#eb#, 16#61#, 16#09#, 16#e3#, 16#12#, 16#c2#, 
      16#ad#, 16#e4#, 16#85#, 16#44#, 16#d2#, 16#b4#, 16#98#, 16#c0#, 
      16#7e#, 16#91#, 16#a1#, 16#02#, 16#dd#, 16#46#, 16#50#, 16#ce#, 
      16#35#, 16#4f#, 16#3f#, 16#20#, 16#1b#, 16#3e#, 16#ca#, 16#b8#, 
      16#e8#, 16#5e#, 16#21#, 16#d6#, 16#67#, 16#95#, 16#9b#, 16#43#, 
      16#d0#, 16#8f#, 16#4e#, 16#90#, 16#fa#, 16#18#, 16#dc#, 16#a2#, 
      16#cc#, 16#ca#, 16#8f#, 16#6f#, 16#f5#, 16#e9#, 16#a9#, 16#02#, 
      16#dc#, 16#8b#, 16#f5#, 16#c5#, 16#da#
   );
   FIPS_560  : constant Byte_Seq := (
      16#de#, 16#ce#, 16#42#, 16#c8#, 16#84#, 16#9b#, 16#e4#, 16#0c#, 
      16#78#, 16#b8#, 16#de#, 16#6d#, 16#a9#, 16#6c#, 16#2a#, 16#8d#, 
      16#7e#, 16#94#, 16#05#, 16#45#, 16#b9#, 16#f3#, 16#f3#, 16#9a#, 
      16#a1#, 16#ca#, 16#03#, 16#ec#, 16#60#, 16#a8#, 16#54#, 16#71#, 
      16#aa#, 16#84#, 16#d8#, 16#e2#, 16#9f#, 16#09#, 16#58#, 16#74#, 
      16#f3#, 16#31#, 16#b9#, 16#0a#, 16#4c#, 16#15#, 16#7d#, 16#a9#, 
      16#eb#, 16#04#, 16#8d#, 16#2c#, 16#8f#, 16#d2#, 16#35#, 16#39#, 
      16#96#, 16#72#, 16#70#, 16#73#, 16#66#, 16#c7#, 16#66#, 16#f1#, 
      16#0b#, 16#b8#, 16#33#, 16#f0#, 16#21#, 16#83#
   );
   FIPS_568  : constant Byte_Seq := (
      16#95#, 16#20#, 16#08#, 16#eb#, 16#de#, 16#dd#, 16#48#, 16#04#, 
      16#49#, 16#bb#, 16#96#, 16#a0#, 16#25#, 16#57#, 16#6c#, 16#5f#, 
      16#61#, 16#7b#, 16#bb#, 16#83#, 16#07#, 16#95#, 16#8a#, 16#01#, 
      16#07#, 16#67#, 16#e0#, 16#d7#, 16#36#, 16#ff#, 16#e5#, 16#a1#, 
      16#96#, 16#ea#, 16#44#, 16#67#, 16#d8#, 16#a5#, 16#d3#, 16#ba#, 
      16#1f#, 16#54#, 16#76#, 16#ff#, 16#07#, 16#b6#, 16#41#, 16#0a#, 
      16#e6#, 16#59#, 16#dc#, 16#ef#, 16#52#, 16#0a#, 16#2c#, 16#14#, 
      16#e3#, 16#90#, 16#2f#, 16#8b#, 16#39#, 16#9a#, 16#28#, 16#9f#, 
      16#41#, 16#f5#, 16#fd#, 16#ad#, 16#b5#, 16#02#, 16#dd#
   );
   FIPS_576  : constant Byte_Seq := (
      16#10#, 16#01#, 16#32#, 16#c3#, 16#15#, 16#bf#, 16#c9#, 16#c4#, 
      16#fb#, 16#93#, 16#02#, 16#3f#, 16#5d#, 16#35#, 16#00#, 16#d7#, 
      16#20#, 16#8a#, 16#68#, 16#ac#, 16#b4#, 16#d2#, 16#c6#, 16#30#, 
      16#96#, 16#23#, 16#2c#, 16#36#, 16#1a#, 16#16#, 16#1c#, 16#4c#, 
      16#67#, 16#c0#, 16#a7#, 16#4b#, 16#c3#, 16#e4#, 16#d7#, 16#2c#, 
      16#11#, 16#66#, 16#4b#, 16#1d#, 16#97#, 16#03#, 16#21#, 16#d4#, 
      16#05#, 16#40#, 16#19#, 16#24#, 16#b3#, 16#a0#, 16#f6#, 16#ce#, 
      16#2b#, 16#1a#, 16#28#, 16#99#, 16#e7#, 16#ca#, 16#a9#, 16#a5#, 
      16#5c#, 16#e7#, 16#25#, 16#fc#, 16#37#, 16#f5#, 16#5d#, 16#6a#
   );
   FIPS_584  : constant Byte_Seq := (
      16#99#, 16#cb#, 16#a4#, 16#01#, 16#9f#, 16#54#, 16#78#, 16#78#, 
      16#9e#, 16#67#, 16#4e#, 16#08#, 16#fe#, 16#5d#, 16#6c#, 16#ea#, 
      16#dd#, 16#69#, 16#8b#, 16#07#, 16#57#, 16#ca#, 16#39#, 16#c6#, 
      16#05#, 16#45#, 16#7c#, 16#22#, 16#c3#, 16#d3#, 16#b8#, 16#ff#, 
      16#b7#, 16#97#, 16#d2#, 16#be#, 16#8f#, 16#12#, 16#96#, 16#0f#, 
      16#09#, 16#9a#, 16#56#, 16#06#, 16#b9#, 16#08#, 16#d4#, 16#72#, 
      16#07#, 16#b2#, 16#63#, 16#6a#, 16#77#, 16#99#, 16#48#, 16#28#, 
      16#2d#, 16#e3#, 16#66#, 16#1b#, 16#b0#, 16#8b#, 16#1b#, 16#37#, 
      16#ee#, 16#57#, 16#65#, 16#90#, 16#80#, 16#0a#, 16#49#, 16#27#, 
      16#30#
   );
   FIPS_592  : constant Byte_Seq := (
      16#bb#, 16#32#, 16#7a#, 16#0b#, 16#cb#, 16#25#, 16#74#, 16#df#, 
      16#47#, 16#08#, 16#0e#, 16#8c#, 16#0d#, 16#8a#, 16#45#, 16#ee#, 
      16#1c#, 16#04#, 16#24#, 16#ae#, 16#04#, 16#14#, 16#dc#, 16#0a#, 
      16#9b#, 16#87#, 16#17#, 16#d9#, 16#f2#, 16#7d#, 16#8a#, 16#c9#, 
      16#87#, 16#c7#, 16#c9#, 16#ec#, 16#bc#, 16#94#, 16#60#, 16#73#, 
      16#88#, 16#4d#, 16#1f#, 16#b9#, 16#6d#, 16#bd#, 16#b5#, 16#83#, 
      16#aa#, 16#75#, 16#81#, 16#86#, 16#b1#, 16#6f#, 16#a4#, 16#29#, 
      16#db#, 16#f1#, 16#5b#, 16#8d#, 16#5b#, 16#b4#, 16#8c#, 16#ca#, 
      16#71#, 16#46#, 16#9e#, 16#7c#, 16#e0#, 16#ad#, 16#8e#, 16#7f#, 
      16#a1#, 16#4d#
   );
   FIPS_600  : constant Byte_Seq := (
      16#7f#, 16#d9#, 16#ee#, 16#b5#, 16#ff#, 16#36#, 16#80#, 16#40#, 
      16#d2#, 16#99#, 16#fd#, 16#17#, 16#a9#, 16#43#, 16#b2#, 16#1d#, 
      16#65#, 16#de#, 16#b2#, 16#ec#, 16#cf#, 16#61#, 16#28#, 16#d1#, 
      16#8a#, 16#33#, 16#eb#, 16#17#, 16#46#, 16#93#, 16#53#, 16#89#, 
      16#35#, 16#37#, 16#4c#, 16#32#, 16#c3#, 16#33#, 16#a8#, 16#67#, 
      16#82#, 16#1d#, 16#ba#, 16#08#, 16#63#, 16#6f#, 16#20#, 16#02#, 
      16#2c#, 16#2c#, 16#e0#, 16#18#, 16#26#, 16#c7#, 16#b7#, 16#e4#, 
      16#16#, 16#40#, 16#ad#, 16#18#, 16#6f#, 16#90#, 16#ed#, 16#0a#, 
      16#c6#, 16#47#, 16#d4#, 16#70#, 16#86#, 16#74#, 16#48#, 16#67#, 
      16#e5#, 16#c5#, 16#4b# 
   );
   FIPS_608  : constant Byte_Seq := (
      16#7c#, 16#a9#, 16#e3#, 16#69#, 16#e8#, 16#21#, 16#86#, 16#98#, 
      16#4d#, 16#5f#, 16#c7#, 16#29#, 16#e1#, 16#11#, 16#a7#, 16#e5#, 
      16#d8#, 16#ec#, 16#19#, 16#c5#, 16#d7#, 16#4e#, 16#13#, 16#b5#, 
      16#ab#, 16#22#, 16#e4#, 16#99#, 16#3b#, 16#05#, 16#c8#, 16#8e#, 
      16#bb#, 16#a6#, 16#ba#, 16#72#, 16#23#, 16#73#, 16#89#, 16#a6#, 
      16#e0#, 16#72#, 16#2e#, 16#12#, 16#c9#, 16#6c#, 16#5d#, 16#6a#, 
      16#54#, 16#51#, 16#5a#, 16#b0#, 16#0a#, 16#d8#, 16#0e#, 16#fb#, 
      16#38#, 16#66#, 16#5a#, 16#76#, 16#e8#, 16#31#, 16#ab#, 16#ab#, 
      16#0f#, 16#a5#, 16#cf#, 16#02#, 16#08#, 16#07#, 16#07#, 16#84#, 
      16#41#, 16#58#, 16#5d#, 16#e5# 
   );
   FIPS_616  : constant Byte_Seq := (
      16#5b#, 16#4d#, 16#94#, 16#5d#, 16#55#, 16#de#, 16#a2#, 16#2e#, 
      16#37#, 16#82#, 16#1e#, 16#c3#, 16#96#, 16#47#, 16#6a#, 16#4b#, 
      16#fb#, 16#61#, 16#7d#, 16#2f#, 16#39#, 16#2a#, 16#d9#, 16#3a#, 
      16#fe#, 16#67#, 16#bc#, 16#fd#, 16#a9#, 16#cd#, 16#9b#, 16#72#, 
      16#5b#, 16#c4#, 16#cc#, 16#df#, 16#51#, 16#6a#, 16#83#, 16#fd#, 
      16#71#, 16#db#, 16#ff#, 16#5a#, 16#22#, 16#b0#, 16#05#, 16#fc#, 
      16#61#, 16#c5#, 16#8e#, 16#47#, 16#12#, 16#40#, 16#bd#, 16#21#, 
      16#93#, 16#ce#, 16#13#, 16#53#, 16#97#, 16#30#, 16#e6#, 16#32#, 
      16#32#, 16#f7#, 16#0f#, 16#80#, 16#30#, 16#8b#, 16#e4#, 16#8d#, 
      16#ab#, 16#72#, 16#66#, 16#a1#, 16#dd# 
   );
   FIPS_624  : constant Byte_Seq := (
      16#e8#, 16#65#, 16#f4#, 16#a4#, 16#2b#, 16#bb#, 16#d0#, 16#b7#, 
      16#3f#, 16#e2#, 16#75#, 16#b8#, 16#ab#, 16#90#, 16#d3#, 16#a9#, 
      16#fb#, 16#74#, 16#ec#, 16#50#, 16#70#, 16#19#, 16#2d#, 16#38#, 
      16#f6#, 16#0e#, 16#fe#, 16#f9#, 16#56#, 16#44#, 16#98#, 16#b9#, 
      16#ad#, 16#b7#, 16#16#, 16#f3#, 16#1d#, 16#50#, 16#cf#, 16#77#, 
      16#c2#, 16#0a#, 16#e4#, 16#b2#, 16#e8#, 16#55#, 16#15#, 16#30#, 
      16#7b#, 16#b8#, 16#d9#, 16#5f#, 16#be#, 16#b9#, 16#ad#, 16#96#, 
      16#40#, 16#01#, 16#ac#, 16#55#, 16#0d#, 16#bc#, 16#60#, 16#cf#, 
      16#21#, 16#3f#, 16#d8#, 16#a5#, 16#22#, 16#ed#, 16#fa#, 16#f5#, 
      16#4e#, 16#5b#, 16#1b#, 16#93#, 16#b2#, 16#b2#
   );
   FIPS_632  : constant Byte_Seq := (
      16#1d#, 16#40#, 16#8c#, 16#7b#, 16#68#, 16#e1#, 16#68#, 16#f4#, 
      16#1b#, 16#b4#, 16#6f#, 16#9b#, 16#2e#, 16#9c#, 16#8b#, 16#04#, 
      16#f9#, 16#68#, 16#e4#, 16#08#, 16#02#, 16#52#, 16#54#, 16#68#, 
      16#14#, 16#cc#, 16#1c#, 16#b2#, 16#91#, 16#7d#, 16#d5#, 16#69#, 
      16#08#, 16#86#, 16#a9#, 16#60#, 16#0a#, 16#09#, 16#c2#, 16#67#, 
      16#3a#, 16#ec#, 16#03#, 16#29#, 16#a4#, 16#da#, 16#f6#, 16#55#, 
      16#50#, 16#8b#, 16#06#, 16#fc#, 16#16#, 16#46#, 16#ef#, 16#3b#, 
      16#b3#, 16#a4#, 16#72#, 16#19#, 16#1d#, 16#96#, 16#4d#, 16#b2#, 
      16#14#, 16#a9#, 16#6a#, 16#96#, 16#fa#, 16#89#, 16#57#, 16#6c#, 
      16#e4#, 16#c4#, 16#f6#, 16#db#, 16#f1#, 16#d1#, 16#76#
   );
   FIPS_640  : constant Byte_Seq := (
      16#54#, 16#ae#, 16#03#, 16#0a#, 16#4e#, 16#27#, 16#a0#, 16#5c#, 
      16#1e#, 16#a4#, 16#a1#, 16#2e#, 16#69#, 16#c6#, 16#75#, 16#44#, 
      16#af#, 16#9b#, 16#40#, 16#44#, 16#cf#, 16#15#, 16#7d#, 16#c8#, 
      16#ce#, 16#bb#, 16#e8#, 16#b2#, 16#d4#, 16#9f#, 16#9b#, 16#c0#, 
      16#77#, 16#90#, 16#77#, 16#60#, 16#3c#, 16#90#, 16#c5#, 16#c5#, 
      16#5b#, 16#89#, 16#1d#, 16#3a#, 16#c3#, 16#3b#, 16#87#, 16#b6#, 
      16#5e#, 16#79#, 16#e1#, 16#b1#, 16#96#, 16#95#, 16#81#, 16#37#, 
      16#18#, 16#19#, 16#1b#, 16#3b#, 16#d8#, 16#b7#, 16#e4#, 16#2d#, 
      16#55#, 16#83#, 16#f7#, 16#cf#, 16#1e#, 16#60#, 16#f8#, 16#44#, 
      16#95#, 16#b8#, 16#f8#, 16#69#, 16#f3#, 16#71#, 16#99#, 16#69#
   );
   FIPS_648  : constant Byte_Seq := (
      16#f7#, 16#3c#, 16#d3#, 16#86#, 16#f7#, 16#3d#, 16#0c#, 16#6a#, 
      16#de#, 16#05#, 16#77#, 16#1b#, 16#33#, 16#11#, 16#71#, 16#17#, 
      16#c6#, 16#02#, 16#e5#, 16#26#, 16#93#, 16#f0#, 16#5b#, 16#47#, 
      16#e9#, 16#00#, 16#32#, 16#ea#, 16#cc#, 16#39#, 16#29#, 16#5f#, 
      16#97#, 16#93#, 16#25#, 16#8f#, 16#e6#, 16#51#, 16#2e#, 16#ea#, 
      16#b2#, 16#91#, 16#ba#, 16#a0#, 16#be#, 16#22#, 16#2e#, 16#14#, 
      16#32#, 16#95#, 16#a2#, 16#8e#, 16#86#, 16#97#, 16#e4#, 16#2f#, 
      16#a2#, 16#7e#, 16#c0#, 16#2b#, 16#44#, 16#21#, 16#7f#, 16#32#, 
      16#a1#, 16#ed#, 16#ae#, 16#2f#, 16#4f#, 16#35#, 16#21#, 16#35#, 
      16#62#, 16#ca#, 16#37#, 16#b6#, 16#d6#, 16#cc#, 16#5e#, 16#f7#, 
      16#2d# 
   );
   FIPS_656  : constant Byte_Seq := (
      16#1d#, 16#25#, 16#96#, 16#12#, 16#e6#, 16#86#, 16#7e#, 16#7d#, 
      16#78#, 16#8c#, 16#71#, 16#d0#, 16#3c#, 16#51#, 16#36#, 16#86#, 
      16#4a#, 16#d6#, 16#d8#, 16#4f#, 16#24#, 16#ea#, 16#f9#, 16#13#, 
      16#a3#, 16#4e#, 16#69#, 16#33#, 16#31#, 16#16#, 16#f8#, 16#12#, 
      16#39#, 16#52#, 16#88#, 16#d4#, 16#dc#, 16#ee#, 16#66#, 16#65#, 
      16#e6#, 16#d7#, 16#da#, 16#bd#, 16#00#, 16#5f#, 16#fc#, 16#63#, 
      16#27#, 16#e3#, 16#ca#, 16#30#, 16#5c#, 16#ab#, 16#78#, 16#56#, 
      16#9d#, 16#11#, 16#07#, 16#a1#, 16#15#, 16#e6#, 16#19#, 16#fc#, 
      16#90#, 16#11#, 16#04#, 16#36#, 16#31#, 16#79#, 16#25#, 16#06#, 
      16#67#, 16#26#, 16#77#, 16#4d#, 16#1d#, 16#a3#, 16#63#, 16#9c#, 
      16#31#, 16#a6# 
   );
   FIPS_664  : constant Byte_Seq := (
      16#da#, 16#87#, 16#34#, 16#41#, 16#4c#, 16#45#, 16#fc#, 16#1d#, 
      16#5a#, 16#75#, 16#a3#, 16#cb#, 16#ac#, 16#ad#, 16#b1#, 16#bf#, 
      16#b5#, 16#23#, 16#d6#, 16#fc#, 16#39#, 16#1f#, 16#88#, 16#2d#, 
      16#0d#, 16#b0#, 16#ee#, 16#f2#, 16#1f#, 16#9f#, 16#fd#, 16#78#, 
      16#b6#, 16#a1#, 16#e1#, 16#4c#, 16#fa#, 16#d0#, 16#9e#, 16#71#, 
      16#b6#, 16#5c#, 16#f7#, 16#b0#, 16#5d#, 16#7e#, 16#8f#, 16#2f#, 
      16#4b#, 16#ae#, 16#4e#, 16#45#, 16#4e#, 16#16#, 16#06#, 16#8d#, 
      16#65#, 16#46#, 16#56#, 16#39#, 16#c7#, 16#29#, 16#cf#, 16#a9#, 
      16#27#, 16#38#, 16#56#, 16#3d#, 16#37#, 16#ed#, 16#c9#, 16#67#, 
      16#6b#, 16#7b#, 16#e6#, 16#04#, 16#ff#, 16#bc#, 16#68#, 16#ec#, 
      16#3b#, 16#6b#, 16#72# 
   );
   FIPS_672  : constant Byte_Seq := (
      16#b2#, 16#28#, 16#c7#, 16#59#, 16#03#, 16#d8#, 16#0f#, 16#bc#, 
      16#6d#, 16#1c#, 16#f6#, 16#29#, 16#ff#, 16#1d#, 16#14#, 16#a9#, 
      16#2e#, 16#c4#, 16#bf#, 16#0e#, 16#12#, 16#1f#, 16#d9#, 16#7b#, 
      16#d3#, 16#06#, 16#ed#, 16#26#, 16#5e#, 16#fe#, 16#7a#, 16#5d#, 
      16#5c#, 16#5d#, 16#8f#, 16#c7#, 16#64#, 16#af#, 16#98#, 16#ed#, 
      16#6f#, 16#59#, 16#78#, 16#f8#, 16#8d#, 16#7c#, 16#d8#, 16#bc#, 
      16#d7#, 16#1c#, 16#be#, 16#f6#, 16#a5#, 16#82#, 16#61#, 16#d2#, 
      16#01#, 16#de#, 16#3c#, 16#b1#, 16#5b#, 16#31#, 16#61#, 16#28#, 
      16#7e#, 16#6a#, 16#10#, 16#4c#, 16#c2#, 16#cf#, 16#88#, 16#2d#, 
      16#83#, 16#9f#, 16#1d#, 16#a0#, 16#d3#, 16#f6#, 16#8b#, 16#42#, 
      16#6c#, 16#f0#, 16#8a#, 16#b9# 
   );
   FIPS_680  : constant Byte_Seq := (
      16#c9#, 16#0d#, 16#47#, 16#3a#, 16#6f#, 16#d3#, 16#0b#, 16#e9#, 
      16#a9#, 16#8b#, 16#f4#, 16#42#, 16#a9#, 16#ad#, 16#65#, 16#a6#, 
      16#97#, 16#d4#, 16#62#, 16#9c#, 16#33#, 16#cd#, 16#51#, 16#7d#, 
      16#bb#, 16#ed#, 16#02#, 16#71#, 16#0f#, 16#a8#, 16#ee#, 16#99#, 
      16#13#, 16#60#, 16#bc#, 16#8e#, 16#55#, 16#7b#, 16#0a#, 16#0b#, 
      16#f0#, 16#b8#, 16#69#, 16#e6#, 16#b0#, 16#c3#, 16#a9#, 16#45#, 
      16#76#, 16#07#, 16#58#, 16#0e#, 16#de#, 16#c3#, 16#85#, 16#9f#, 
      16#20#, 16#60#, 16#c9#, 16#c0#, 16#34#, 16#02#, 16#89#, 16#d5#, 
      16#3a#, 16#5d#, 16#75#, 16#59#, 16#18#, 16#ca#, 16#54#, 16#87#, 
      16#65#, 16#99#, 16#04#, 16#5a#, 16#86#, 16#a9#, 16#bc#, 16#b8#, 
      16#16#, 16#37#, 16#95#, 16#ea#, 16#8c#
   );
   FIPS_688  : constant Byte_Seq := (
      16#6d#, 16#f8#, 16#c5#, 16#c2#, 16#8d#, 16#17#, 16#28#, 16#97#, 
      16#5a#, 16#0b#, 16#76#, 16#6c#, 16#d7#, 16#de#, 16#63#, 16#bb#, 
      16#e7#, 16#f4#, 16#8c#, 16#3d#, 16#b3#, 16#e6#, 16#fd#, 16#5a#, 
      16#4b#, 16#8d#, 16#f6#, 16#e3#, 16#90#, 16#5c#, 16#ef#, 16#03#, 
      16#51#, 16#f3#, 16#d9#, 16#73#, 16#b4#, 16#f2#, 16#a7#, 16#ee#, 
      16#d8#, 16#0b#, 16#0d#, 16#e5#, 16#b8#, 16#5c#, 16#87#, 16#73#, 
      16#53#, 16#fb#, 16#9e#, 16#93#, 16#0a#, 16#d2#, 16#67#, 16#91#, 
      16#49#, 16#ad#, 16#4c#, 16#be#, 16#69#, 16#91#, 16#0e#, 16#68#, 
      16#d5#, 16#50#, 16#0b#, 16#09#, 16#6c#, 16#5a#, 16#bd#, 16#bf#, 
      16#27#, 16#d6#, 16#84#, 16#fc#, 16#fc#, 16#f1#, 16#a5#, 16#7f#, 
      16#02#, 16#76#, 16#92#, 16#83#, 16#d5#, 16#a0#
   );
   FIPS_696  : constant Byte_Seq := (
      16#2c#, 16#fc#, 16#76#, 16#f8#, 16#8c#, 16#b6#, 16#fb#, 16#90#, 
      16#92#, 16#7b#, 16#69#, 16#52#, 16#6a#, 16#d5#, 16#f0#, 16#3d#, 
      16#6b#, 16#d3#, 16#35#, 16#f4#, 16#f7#, 16#5b#, 16#52#, 16#b6#, 
      16#a3#, 16#c2#, 16#1e#, 16#8f#, 16#98#, 16#9a#, 16#b0#, 16#d0#, 
      16#3a#, 16#cb#, 16#1e#, 16#be#, 16#07#, 16#e6#, 16#8a#, 16#87#, 
      16#c1#, 16#b5#, 16#60#, 16#7a#, 16#cf#, 16#17#, 16#d9#, 16#76#, 
      16#e1#, 16#0a#, 16#c4#, 16#a3#, 16#d3#, 16#0a#, 16#85#, 16#61#, 
      16#d4#, 16#9a#, 16#5e#, 16#7e#, 16#c7#, 16#20#, 16#ed#, 16#ac#, 
      16#e9#, 16#f5#, 16#f6#, 16#32#, 16#b4#, 16#bd#, 16#63#, 16#e1#, 
      16#04#, 16#f4#, 16#89#, 16#4a#, 16#79#, 16#ca#, 16#ad#, 16#2e#, 
      16#1c#, 16#31#, 16#c7#, 16#36#, 16#45#, 16#34#, 16#85#
   );
   FIPS_704  : constant Byte_Seq := (
      16#3f#, 16#05#, 16#10#, 16#8c#, 16#2f#, 16#33#, 16#d3#, 16#9b#, 
      16#3a#, 16#a9#, 16#e7#, 16#3e#, 16#fb#, 16#ad#, 16#4b#, 16#01#, 
      16#1b#, 16#4e#, 16#9e#, 16#9f#, 16#ba#, 16#40#, 16#9b#, 16#76#, 
      16#11#, 16#e7#, 16#e0#, 16#39#, 16#56#, 16#b2#, 16#f3#, 16#e5#, 
      16#e0#, 16#aa#, 16#86#, 16#f6#, 16#8c#, 16#4b#, 16#fa#, 16#da#, 
      16#5f#, 16#92#, 16#23#, 16#a6#, 16#6d#, 16#57#, 16#4b#, 16#08#, 
      16#f9#, 16#dd#, 16#79#, 16#7c#, 16#dd#, 16#a8#, 16#f3#, 16#c3#, 
      16#2d#, 16#8e#, 16#01#, 16#92#, 16#17#, 16#11#, 16#f4#, 16#87#, 
      16#0d#, 16#ec#, 16#67#, 16#60#, 16#27#, 16#ec#, 16#c5#, 16#6f#, 
      16#c2#, 16#01#, 16#0b#, 16#49#, 16#6e#, 16#95#, 16#cf#, 16#bf#, 
      16#07#, 16#1c#, 16#82#, 16#0f#, 16#21#, 16#ed#, 16#f2#, 16#5b# 
   );
   FIPS_712  : constant Byte_Seq := (
      16#1f#, 16#fb#, 16#e1#, 16#af#, 16#f0#, 16#a1#, 16#e7#, 16#fa#, 
      16#3e#, 16#68#, 16#be#, 16#31#, 16#a7#, 16#46#, 16#12#, 16#a1#, 
      16#51#, 16#9b#, 16#59#, 16#39#, 16#7e#, 16#70#, 16#07#, 16#ef#, 
      16#61#, 16#fc#, 16#01#, 16#5f#, 16#31#, 16#6d#, 16#55#, 16#b5#, 
      16#7b#, 16#e5#, 16#28#, 16#ce#, 16#bc#, 16#c2#, 16#f0#, 16#9a#, 
      16#2f#, 16#22#, 16#e3#, 16#c5#, 16#e4#, 16#a6#, 16#ae#, 16#96#, 
      16#12#, 16#77#, 16#6b#, 16#17#, 16#ae#, 16#87#, 16#cd#, 16#76#, 
      16#3c#, 16#1a#, 16#9e#, 16#ab#, 16#e6#, 16#84#, 16#6c#, 16#5b#, 
      16#cb#, 16#34#, 16#7f#, 16#fc#, 16#99#, 16#f1#, 16#0e#, 16#3b#, 
      16#5e#, 16#64#, 16#b2#, 16#9a#, 16#9b#, 16#d7#, 16#1a#, 16#5e#, 
      16#9b#, 16#3c#, 16#01#, 16#a8#, 16#02#, 16#71#, 16#5d#, 16#e2#, 
      16#a9# 
   );
   FIPS_720  : constant Byte_Seq := (
      16#f7#, 16#55#, 16#d6#, 16#b5#, 16#64#, 16#23#, 16#78#, 16#f2#, 
      16#84#, 16#78#, 16#93#, 16#90#, 16#1d#, 16#9a#, 16#a9#, 16#1c#, 
      16#54#, 16#a4#, 16#b7#, 16#ab#, 16#b9#, 16#7c#, 16#5c#, 16#71#, 
      16#84#, 16#06#, 16#3e#, 16#8f#, 16#1e#, 16#97#, 16#aa#, 16#2d#, 
      16#e4#, 16#ad#, 16#7a#, 16#c9#, 16#27#, 16#dd#, 16#3c#, 16#ce#, 
      16#77#, 16#0c#, 16#90#, 16#69#, 16#21#, 16#e2#, 16#d2#, 16#98#, 
      16#f6#, 16#7c#, 16#f9#, 16#84#, 16#4e#, 16#61#, 16#bf#, 16#10#, 
      16#4d#, 16#b8#, 16#03#, 16#b2#, 16#65#, 16#b8#, 16#6b#, 16#82#, 
      16#1c#, 16#5f#, 16#4d#, 16#90#, 16#10#, 16#67#, 16#d0#, 16#7b#, 
      16#38#, 16#76#, 16#4e#, 16#3f#, 16#6c#, 16#95#, 16#fd#, 16#4f#, 
      16#28#, 16#e3#, 16#cf#, 16#e4#, 16#8d#, 16#8a#, 16#96#, 16#94#, 
      16#a8#, 16#f3# 
   );
   FIPS_728  : constant Byte_Seq := (
      16#77#, 16#35#, 16#77#, 16#f3#, 16#a6#, 16#42#, 16#c4#, 16#f1#, 
      16#3b#, 16#1c#, 16#b1#, 16#f4#, 16#10#, 16#3e#, 16#9f#, 16#6b#, 
      16#2d#, 16#a8#, 16#62#, 16#68#, 16#a5#, 16#2f#, 16#44#, 16#9c#, 
      16#bb#, 16#17#, 16#4c#, 16#83#, 16#49#, 16#e3#, 16#c0#, 16#dc#, 
      16#63#, 16#6c#, 16#e8#, 16#5c#, 16#37#, 16#31#, 16#15#, 16#a3#, 
      16#37#, 16#ee#, 16#e2#, 16#6f#, 16#7b#, 16#70#, 16#ba#, 16#10#, 
      16#60#, 16#a7#, 16#9a#, 16#1c#, 16#76#, 16#fd#, 16#18#, 16#63#, 
      16#99#, 16#e6#, 16#a5#, 16#25#, 16#5d#, 16#b8#, 16#0f#, 16#83#, 
      16#b0#, 16#be#, 16#4a#, 16#34#, 16#ba#, 16#87#, 16#6f#, 16#79#, 
      16#08#, 16#84#, 16#05#, 16#53#, 16#ea#, 16#d3#, 16#80#, 16#f3#, 
      16#19#, 16#55#, 16#07#, 16#72#, 16#9d#, 16#06#, 16#7a#, 16#c2#, 
      16#ee#, 16#8e#, 16#b4# 
   );
   FIPS_736  : constant Byte_Seq := (
      16#65#, 16#15#, 16#89#, 16#92#, 16#7e#, 16#17#, 16#e1#, 16#ae#, 
      16#f7#, 16#80#, 16#69#, 16#0f#, 16#31#, 16#00#, 16#a3#, 16#77#, 
      16#f0#, 16#17#, 16#9b#, 16#18#, 16#b3#, 16#1f#, 16#d5#, 16#b4#, 
      16#41#, 16#8c#, 16#84#, 16#03#, 16#85#, 16#73#, 16#fc#, 16#55#, 
      16#9b#, 16#49#, 16#6a#, 16#78#, 16#2b#, 16#ee#, 16#c3#, 16#dc#, 
      16#f6#, 16#e9#, 16#fa#, 16#f5#, 16#ae#, 16#f6#, 16#76#, 16#e1#, 
      16#0b#, 16#be#, 16#c3#, 16#4b#, 16#1b#, 16#e5#, 16#88#, 16#8f#, 
      16#da#, 16#49#, 16#b9#, 16#1e#, 16#02#, 16#89#, 16#0d#, 16#25#, 
      16#24#, 16#c5#, 16#b3#, 16#69#, 16#f8#, 16#a5#, 16#41#, 16#75#, 
      16#f2#, 16#9d#, 16#ed#, 16#f8#, 16#15#, 16#6f#, 16#ff#, 16#69#, 
      16#0c#, 16#f1#, 16#86#, 16#ec#, 16#77#, 16#10#, 16#4a#, 16#79#, 
      16#83#, 16#15#, 16#03#, 16#3b# 
   );
   FIPS_744  : constant Byte_Seq := (
      16#67#, 16#86#, 16#52#, 16#60#, 16#0e#, 16#ee#, 16#42#, 16#58#, 
      16#0f#, 16#73#, 16#62#, 16#34#, 16#12#, 16#e9#, 16#c0#, 16#11#, 
      16#cc#, 16#02#, 16#de#, 16#c4#, 16#d4#, 16#cc#, 16#1b#, 16#79#, 
      16#b2#, 16#7b#, 16#6f#, 16#99#, 16#39#, 16#69#, 16#5b#, 16#f2#, 
      16#18#, 16#5b#, 16#20#, 16#12#, 16#ab#, 16#06#, 16#30#, 16#f3#, 
      16#17#, 16#d2#, 16#e2#, 16#de#, 16#95#, 16#dd#, 16#69#, 16#89#, 
      16#0e#, 16#43#, 16#07#, 16#83#, 16#e9#, 16#9d#, 16#7e#, 16#d1#, 
      16#21#, 16#c7#, 16#c8#, 16#da#, 16#9a#, 16#e7#, 16#07#, 16#80#, 
      16#b5#, 16#aa#, 16#bf#, 16#90#, 16#22#, 16#d1#, 16#43#, 16#5c#, 
      16#f5#, 16#ed#, 16#6d#, 16#a6#, 16#fc#, 16#66#, 16#92#, 16#c0#, 
      16#50#, 16#c2#, 16#b5#, 16#f2#, 16#2b#, 16#24#, 16#fb#, 16#1c#, 
      16#f9#, 16#13#, 16#5f#, 16#9c#, 16#b2# 
   );
   FIPS_752  : constant Byte_Seq := (
      16#41#, 16#6d#, 16#3f#, 16#b7#, 16#b4#, 16#01#, 16#fa#, 16#5e#, 
      16#78#, 16#cd#, 16#96#, 16#d4#, 16#79#, 16#d8#, 16#86#, 16#0d#, 
      16#f1#, 16#47#, 16#ee#, 16#f0#, 16#3a#, 16#df#, 16#13#, 16#fc#, 
      16#e1#, 16#c6#, 16#11#, 16#31#, 16#fb#, 16#89#, 16#cc#, 16#2e#, 
      16#bc#, 16#63#, 16#28#, 16#97#, 16#45#, 16#bd#, 16#7d#, 16#b9#, 
      16#be#, 16#f1#, 16#45#, 16#71#, 16#a5#, 16#53#, 16#18#, 16#49#, 
      16#65#, 16#72#, 16#db#, 16#e5#, 16#2b#, 16#9b#, 16#34#, 16#9e#, 
      16#f5#, 16#9f#, 16#40#, 16#6c#, 16#ec#, 16#d6#, 16#89#, 16#09#, 
      16#f3#, 16#64#, 16#32#, 16#53#, 16#80#, 16#bb#, 16#75#, 16#f3#, 
      16#aa#, 16#62#, 16#50#, 16#3c#, 16#84#, 16#f4#, 16#7a#, 16#55#, 
      16#aa#, 16#6b#, 16#9c#, 16#9b#, 16#19#, 16#9e#, 16#be#, 16#41#, 
      16#44#, 16#09#, 16#ff#, 16#39#, 16#64#, 16#cd# 
   );
   FIPS_760  : constant Byte_Seq := (
      16#6f#, 16#09#, 16#e8#, 16#76#, 16#c0#, 16#b8#, 16#3c#, 16#99#, 
      16#34#, 16#ff#, 16#b7#, 16#77#, 16#f0#, 16#06#, 16#33#, 16#8c#, 
      16#51#, 16#42#, 16#a3#, 16#13#, 16#75#, 16#e9#, 16#b2#, 16#1c#, 
      16#fe#, 16#a9#, 16#a7#, 16#de#, 16#12#, 16#99#, 16#8c#, 16#4e#, 
      16#a6#, 16#70#, 16#8f#, 16#f1#, 16#fd#, 16#f5#, 16#a8#, 16#ee#, 
      16#6b#, 16#b6#, 16#7c#, 16#67#, 16#5f#, 16#fd#, 16#82#, 16#09#, 
      16#a1#, 16#00#, 16#64#, 16#e2#, 16#d7#, 16#58#, 16#a8#, 16#73#, 
      16#4e#, 16#b4#, 16#8f#, 16#07#, 16#f7#, 16#cf#, 16#3d#, 16#43#, 
      16#b0#, 16#9f#, 16#1b#, 16#fd#, 16#c5#, 16#d0#, 16#7a#, 16#52#, 
      16#b7#, 16#70#, 16#79#, 16#f2#, 16#3c#, 16#ec#, 16#28#, 16#bf#, 
      16#86#, 16#3b#, 16#ed#, 16#97#, 16#c8#, 16#59#, 16#27#, 16#6d#, 
      16#f7#, 16#f7#, 16#12#, 16#9f#, 16#ce#, 16#71#, 16#eb# 
   );
   FIPS_768  : constant Byte_Seq := (
      16#0d#, 16#c2#, 16#b2#, 16#26#, 16#b3#, 16#43#, 16#1c#, 16#69#, 
      16#a7#, 16#6a#, 16#dd#, 16#c0#, 16#18#, 16#fc#, 16#bd#, 16#a2#, 
      16#2b#, 16#d7#, 16#2c#, 16#8f#, 16#f0#, 16#1e#, 16#d6#, 16#54#, 
      16#95#, 16#96#, 16#79#, 16#8b#, 16#d9#, 16#50#, 16#f3#, 16#61#, 
      16#c4#, 16#89#, 16#a0#, 16#9c#, 16#95#, 16#ce#, 16#e2#, 16#dc#, 
      16#fd#, 16#64#, 16#01#, 16#20#, 16#8a#, 16#e6#, 16#36#, 16#8d#, 
      16#66#, 16#30#, 16#02#, 16#6b#, 16#41#, 16#7c#, 16#c4#, 16#71#, 
      16#8c#, 16#cb#, 16#8b#, 16#42#, 16#e8#, 16#87#, 16#29#, 16#37#, 
      16#de#, 16#66#, 16#89#, 16#5f#, 16#d0#, 16#91#, 16#42#, 16#c4#, 
      16#2f#, 16#06#, 16#6b#, 16#f0#, 16#ef#, 16#3a#, 16#b2#, 16#b0#, 
      16#38#, 16#03#, 16#a8#, 16#18#, 16#5f#, 16#b6#, 16#5f#, 16#c7#, 
      16#14#, 16#8c#, 16#37#, 16#6d#, 16#dd#, 16#4b#, 16#f5#, 16#8a#
   );
   FIPS_776  : constant Byte_Seq := (
      16#8d#, 16#c7#, 16#1c#, 16#84#, 16#c8#, 16#77#, 16#27#, 16#53#, 
      16#c8#, 16#6a#, 16#b6#, 16#af#, 16#d8#, 16#0e#, 16#8d#, 16#1d#, 
      16#f9#, 16#b0#, 16#d7#, 16#e8#, 16#d6#, 16#9e#, 16#be#, 16#67#, 
      16#fa#, 16#88#, 16#3a#, 16#82#, 16#41#, 16#2c#, 16#26#, 16#73#, 
      16#8c#, 16#33#, 16#99#, 16#ca#, 16#b9#, 16#55#, 16#73#, 16#b4#, 
      16#d3#, 16#c4#, 16#36#, 16#7c#, 16#85#, 16#c8#, 16#18#, 16#52#, 
      16#d5#, 16#a6#, 16#56#, 16#4c#, 16#0f#, 16#c7#, 16#ca#, 16#aa#, 
      16#fe#, 16#16#, 16#c0#, 16#5e#, 16#62#, 16#aa#, 16#06#, 16#cc#, 
      16#9f#, 16#a5#, 16#42#, 16#ce#, 16#b3#, 16#5c#, 16#88#, 16#fb#, 
      16#6a#, 16#b8#, 16#2c#, 16#29#, 16#d5#, 16#dc#, 16#d5#, 16#30#, 
      16#f8#, 16#07#, 16#d3#, 16#f1#, 16#c3#, 16#bc#, 16#b3#, 16#97#, 
      16#44#, 16#21#, 16#10#, 16#1d#, 16#1a#, 16#a6#, 16#ac#, 16#11#, 
      16#2d# 
   );
   FIPS_784  : constant Byte_Seq := (
      16#3d#, 16#f3#, 16#ed#, 16#d9#, 16#fc#, 16#93#, 16#be#, 16#99#, 
      16#60#, 16#b5#, 16#a6#, 16#32#, 16#e2#, 16#84#, 16#7b#, 16#30#, 
      16#b1#, 16#01#, 16#87#, 16#c8#, 16#f8#, 16#3d#, 16#e5#, 16#b4#, 
      16#5f#, 16#cb#, 16#2e#, 16#3e#, 16#d4#, 16#75#, 16#56#, 16#9a#, 
      16#8b#, 16#2e#, 16#d0#, 16#78#, 16#43#, 16#48#, 16#f9#, 16#da#, 
      16#cc#, 16#e7#, 16#b3#, 16#23#, 16#c6#, 16#b6#, 16#50#, 16#71#, 
      16#ab#, 16#d8#, 16#b3#, 16#2d#, 16#10#, 16#22#, 16#b1#, 16#e1#, 
      16#27#, 16#87#, 16#bd#, 16#49#, 16#89#, 16#d3#, 16#c5#, 16#ac#, 
      16#32#, 16#9d#, 16#57#, 16#6c#, 16#cd#, 16#76#, 16#08#, 16#dd#, 
      16#33#, 16#67#, 16#16#, 16#53#, 16#2e#, 16#9b#, 16#4c#, 16#7f#, 
      16#82#, 16#58#, 16#26#, 16#fb#, 16#2e#, 16#34#, 16#36#, 16#23#, 
      16#ef#, 16#85#, 16#c6#, 16#27#, 16#06#, 16#19#, 16#bf#, 16#5e#, 
      16#3b#, 16#27# 
   );
   FIPS_792  : constant Byte_Seq := (
      16#ce#, 16#d0#, 16#ec#, 16#65#, 16#00#, 16#cb#, 16#89#, 16#1e#, 
      16#64#, 16#33#, 16#d1#, 16#04#, 16#ba#, 16#5b#, 16#1c#, 16#1e#, 
      16#bc#, 16#a3#, 16#97#, 16#f3#, 16#a5#, 16#ee#, 16#ea#, 16#a0#, 
      16#f0#, 16#56#, 16#17#, 16#29#, 16#62#, 16#1e#, 16#a5#, 16#0d#, 
      16#4a#, 16#e7#, 16#ff#, 16#1d#, 16#08#, 16#27#, 16#17#, 16#8d#, 
      16#cc#, 16#d8#, 16#4e#, 16#4c#, 16#a0#, 16#6d#, 16#98#, 16#91#, 
      16#a9#, 16#0a#, 16#db#, 16#b7#, 16#a9#, 16#f4#, 16#99#, 16#4a#, 
      16#c9#, 16#47#, 16#cf#, 16#62#, 16#96#, 16#e7#, 16#1d#, 16#2f#, 
      16#49#, 16#b8#, 16#26#, 16#d6#, 16#4b#, 16#12#, 16#3a#, 16#7b#, 
      16#f8#, 16#6f#, 16#33#, 16#9f#, 16#a4#, 16#67#, 16#9c#, 16#ad#, 
      16#db#, 16#df#, 16#19#, 16#cf#, 16#ed#, 16#7d#, 16#02#, 16#06#, 
      16#aa#, 16#5f#, 16#52#, 16#7a#, 16#6b#, 16#0c#, 16#c0#, 16#0f#, 
      16#52#, 16#aa#, 16#2b# 
   );
   FIPS_800  : constant Byte_Seq := (
      16#af#, 16#a4#, 16#a2#, 16#c4#, 16#fb#, 16#af#, 16#fe#, 16#83#, 
      16#8d#, 16#d1#, 16#49#, 16#c7#, 16#8e#, 16#a7#, 16#85#, 16#1e#, 
      16#a9#, 16#39#, 16#63#, 16#04#, 16#b4#, 16#18#, 16#06#, 16#a0#, 
      16#93#, 16#a9#, 16#0a#, 16#ae#, 16#59#, 16#c0#, 16#c5#, 16#bd#, 
      16#b1#, 16#70#, 16#cc#, 16#9a#, 16#7d#, 16#22#, 16#b9#, 16#0c#, 
      16#bc#, 16#e5#, 16#2c#, 16#c1#, 16#b1#, 16#05#, 16#10#, 16#89#, 
      16#42#, 16#df#, 16#20#, 16#c2#, 16#9e#, 16#f3#, 16#a9#, 16#13#, 
      16#22#, 16#3b#, 16#91#, 16#5e#, 16#7e#, 16#bc#, 16#98#, 16#ef#, 
      16#13#, 16#5a#, 16#de#, 16#fa#, 16#a0#, 16#f0#, 16#a6#, 16#44#, 
      16#1e#, 16#a0#, 16#59#, 16#20#, 16#e8#, 16#68#, 16#ce#, 16#9d#, 
      16#1f#, 16#f6#, 16#c8#, 16#fe#, 16#4d#, 16#be#, 16#c0#, 16#6a#, 
      16#48#, 16#49#, 16#e5#, 16#e5#, 16#5a#, 16#d0#, 16#62#, 16#7f#, 
      16#9e#, 16#09#, 16#df#, 16#cb# 
   );
   FIPS_808  : constant Byte_Seq := (
      16#00#, 16#f6#, 16#5a#, 16#48#, 16#5b#, 16#fd#, 16#38#, 16#11#, 
      16#13#, 16#d6#, 16#e7#, 16#9b#, 16#f9#, 16#e0#, 16#d5#, 16#e5#, 
      16#18#, 16#c8#, 16#91#, 16#98#, 16#8c#, 16#07#, 16#3b#, 16#a1#, 
      16#98#, 16#ac#, 16#3a#, 16#20#, 16#f2#, 16#5c#, 16#2c#, 16#81#, 
      16#61#, 16#97#, 16#23#, 16#e8#, 16#8a#, 16#3c#, 16#0e#, 16#d3#, 
      16#07#, 16#50#, 16#75#, 16#fb#, 16#ba#, 16#fb#, 16#6a#, 16#7b#, 
      16#61#, 16#d3#, 16#bc#, 16#33#, 16#6a#, 16#5e#, 16#6d#, 16#6f#, 
      16#08#, 16#d1#, 16#66#, 16#c4#, 16#86#, 16#1e#, 16#6a#, 16#3b#, 
      16#dc#, 16#2e#, 16#49#, 16#b2#, 16#80#, 16#6b#, 16#56#, 16#7e#, 
      16#7e#, 16#82#, 16#1a#, 16#55#, 16#cb#, 16#67#, 16#4a#, 16#6c#, 
      16#d6#, 16#99#, 16#f7#, 16#dc#, 16#61#, 16#a7#, 16#05#, 16#4a#, 
      16#8f#, 16#f3#, 16#de#, 16#c7#, 16#3e#, 16#b6#, 16#67#, 16#f5#, 
      16#96#, 16#44#, 16#34#, 16#6b#, 16#e2# 
   );
   FIPS_816  : constant Byte_Seq := (
      16#b9#, 16#ce#, 16#38#, 16#2e#, 16#1e#, 16#82#, 16#a8#, 16#73#, 
      16#cc#, 16#44#, 16#42#, 16#48#, 16#a3#, 16#00#, 16#8c#, 16#2c#, 
      16#f6#, 16#4d#, 16#18#, 16#75#, 16#90#, 16#57#, 16#ab#, 16#e8#, 
      16#f9#, 16#1c#, 16#9d#, 16#87#, 16#f5#, 16#dc#, 16#83#, 16#aa#, 
      16#4e#, 16#ca#, 16#0c#, 16#51#, 16#d3#, 16#08#, 16#29#, 16#b9#, 
      16#a1#, 16#d2#, 16#71#, 16#2d#, 16#a1#, 16#fa#, 16#c3#, 16#1f#, 
      16#52#, 16#94#, 16#2d#, 16#77#, 16#c9#, 16#f2#, 16#0c#, 16#2b#, 
      16#f6#, 16#d3#, 16#75#, 16#10#, 16#28#, 16#d7#, 16#d4#, 16#f0#, 
      16#d3#, 16#36#, 16#d3#, 16#dc#, 16#92#, 16#b2#, 16#7e#, 16#c3#, 
      16#68#, 16#ca#, 16#a4#, 16#44#, 16#4b#, 16#31#, 16#80#, 16#c1#, 
      16#e3#, 16#7e#, 16#98#, 16#b5#, 16#8f#, 16#25#, 16#e6#, 16#47#, 
      16#a9#, 16#a6#, 16#36#, 16#1f#, 16#0b#, 16#04#, 16#cf#, 16#78#, 
      16#d1#, 16#79#, 16#55#, 16#76#, 16#61#, 16#68# 
   );
   FIPS_824  : constant Byte_Seq := (
      16#67#, 16#78#, 16#d8#, 16#2f#, 16#3a#, 16#98#, 16#ee#, 16#cd#, 
      16#fa#, 16#c5#, 16#5d#, 16#de#, 16#eb#, 16#c5#, 16#24#, 16#76#, 
      16#a0#, 16#70#, 16#09#, 16#4f#, 16#bd#, 16#65#, 16#83#, 16#18#, 
      16#01#, 16#fd#, 16#d6#, 16#0f#, 16#83#, 16#7d#, 16#80#, 16#d2#, 
      16#3b#, 16#90#, 16#d4#, 16#72#, 16#c5#, 16#f4#, 16#e5#, 16#ca#, 
      16#62#, 16#73#, 16#a5#, 16#0f#, 16#40#, 16#15#, 16#4e#, 16#a8#, 
      16#fb#, 16#94#, 16#01#, 16#3f#, 16#63#, 16#10#, 16#ad#, 16#18#, 
      16#80#, 16#04#, 16#33#, 16#a1#, 16#d3#, 16#79#, 16#c8#, 16#4b#, 
      16#df#, 16#79#, 16#9a#, 16#99#, 16#e8#, 16#c7#, 16#b6#, 16#76#, 
      16#fb#, 16#cd#, 16#29#, 16#cc#, 16#2e#, 16#d6#, 16#65#, 16#52#, 
      16#29#, 16#7d#, 16#e7#, 16#a6#, 16#e5#, 16#65#, 16#17#, 16#9b#, 
      16#b4#, 16#2b#, 16#70#, 16#d4#, 16#82#, 16#99#, 16#e0#, 16#92#, 
      16#5a#, 16#1d#, 16#72#, 16#ca#, 16#2c#, 16#79#, 16#2a# 
   );
   FIPS_832  : constant Byte_Seq := (
      16#ba#, 16#3a#, 16#54#, 16#a7#, 16#7d#, 16#7c#, 16#2b#, 16#8c#, 
      16#ce#, 16#c6#, 16#d5#, 16#31#, 16#36#, 16#cd#, 16#48#, 16#82#, 
      16#7c#, 16#87#, 16#ac#, 16#dd#, 16#1c#, 16#d8#, 16#6a#, 16#d1#, 
      16#f5#, 16#6e#, 16#86#, 16#26#, 16#42#, 16#ea#, 16#2e#, 16#1d#, 
      16#cb#, 16#40#, 16#93#, 16#f8#, 16#5d#, 16#60#, 16#f7#, 16#bd#, 
      16#77#, 16#16#, 16#07#, 16#38#, 16#46#, 16#2e#, 16#6c#, 16#3f#, 
      16#d3#, 16#dd#, 16#9d#, 16#3a#, 16#7c#, 16#5c#, 16#f7#, 16#e2#, 
      16#a1#, 16#d6#, 16#0f#, 16#48#, 16#9f#, 16#84#, 16#47#, 16#19#, 
      16#02#, 16#17#, 16#9f#, 16#21#, 16#f6#, 16#56#, 16#ce#, 16#0f#, 
      16#ff#, 16#08#, 16#92#, 16#78#, 16#ea#, 16#14#, 16#44#, 16#1e#, 
      16#04#, 16#e7#, 16#af#, 16#71#, 16#89#, 16#16#, 16#22#, 16#56#, 
      16#5f#, 16#44#, 16#c4#, 16#28#, 16#04#, 16#47#, 16#28#, 16#fc#, 
      16#c6#, 16#86#, 16#21#, 16#2a#, 16#32#, 16#a5#, 16#d8#, 16#09#
   );
   FIPS_840  : constant Byte_Seq := (
      16#7e#, 16#ec#, 16#4f#, 16#4f#, 16#49#, 16#1b#, 16#4e#, 16#ea#, 
      16#eb#, 16#1c#, 16#db#, 16#db#, 16#95#, 16#e9#, 16#51#, 16#1c#, 
      16#28#, 16#72#, 16#37#, 16#2b#, 16#f6#, 16#4a#, 16#1f#, 16#61#, 
      16#cd#, 16#a1#, 16#cd#, 16#80#, 16#32#, 16#72#, 16#9c#, 16#8b#, 
      16#ea#, 16#fd#, 16#1e#, 16#da#, 16#bf#, 16#78#, 16#03#, 16#6d#, 
      16#80#, 16#02#, 16#3c#, 16#81#, 16#4a#, 16#d8#, 16#60#, 16#61#, 
      16#06#, 16#cb#, 16#4e#, 16#7f#, 16#33#, 16#f2#, 16#14#, 16#c3#, 
      16#e6#, 16#9c#, 16#0f#, 16#23#, 16#0e#, 16#88#, 16#54#, 16#74#, 
      16#fd#, 16#59#, 16#4f#, 16#7f#, 16#24#, 16#44#, 16#aa#, 16#58#, 
      16#1e#, 16#0c#, 16#70#, 16#eb#, 16#f1#, 16#30#, 16#73#, 16#d8#, 
      16#90#, 16#63#, 16#eb#, 16#81#, 16#a4#, 16#3c#, 16#5f#, 16#60#, 
      16#8b#, 16#2f#, 16#c9#, 16#9f#, 16#a1#, 16#bc#, 16#f5#, 16#e2#, 
      16#bf#, 16#e6#, 16#2a#, 16#68#, 16#02#, 16#e7#, 16#0c#, 16#52#, 
      16#ce# 
   );
   FIPS_848  : constant Byte_Seq := (
      16#f3#, 16#71#, 16#5b#, 16#9e#, 16#3d#, 16#dd#, 16#78#, 16#62#, 
      16#e1#, 16#5e#, 16#e8#, 16#7a#, 16#a2#, 16#3f#, 16#1a#, 16#aa#, 
      16#05#, 16#80#, 16#59#, 16#1e#, 16#55#, 16#cf#, 16#f3#, 16#fe#, 
      16#e9#, 16#b4#, 16#9b#, 16#42#, 16#aa#, 16#0c#, 16#0c#, 16#c8#, 
      16#cf#, 16#b8#, 16#ef#, 16#a3#, 16#eb#, 16#96#, 16#ff#, 16#b7#, 
      16#2a#, 16#b0#, 16#6b#, 16#83#, 16#d7#, 16#b4#, 16#7b#, 16#3d#, 
      16#22#, 16#a5#, 16#77#, 16#24#, 16#21#, 16#cf#, 16#c5#, 16#12#, 
      16#14#, 16#00#, 16#51#, 16#50#, 16#ed#, 16#f5#, 16#32#, 16#af#, 
      16#10#, 16#13#, 16#8a#, 16#d4#, 16#57#, 16#58#, 16#ad#, 16#d4#, 
      16#59#, 16#90#, 16#86#, 16#01#, 16#ec#, 16#cc#, 16#37#, 16#03#, 
      16#e8#, 16#10#, 16#00#, 16#2a#, 16#2e#, 16#4c#, 16#62#, 16#02#, 
      16#e9#, 16#8d#, 16#84#, 16#28#, 16#14#, 16#75#, 16#d5#, 16#5d#, 
      16#3d#, 16#e9#, 16#f3#, 16#d9#, 16#88#, 16#09#, 16#cc#, 16#e1#, 
      16#f6#, 16#65# 
   );
   FIPS_856  : constant Byte_Seq := (
      16#df#, 16#d7#, 16#d7#, 16#92#, 16#e1#, 16#62#, 16#bf#, 16#7a#, 
      16#88#, 16#91#, 16#09#, 16#55#, 16#0a#, 16#0f#, 16#c4#, 16#c4#, 
      16#15#, 16#23#, 16#2a#, 16#f0#, 16#c0#, 16#d7#, 16#2d#, 16#cb#, 
      16#c2#, 16#59#, 16#52#, 16#99#, 16#e1#, 16#a1#, 16#c2#, 16#ae#, 
      16#ae#, 16#54#, 16#9f#, 16#79#, 16#70#, 16#e9#, 16#94#, 16#c1#, 
      16#5e#, 16#0a#, 16#b0#, 16#2f#, 16#11#, 16#3d#, 16#74#, 16#0d#, 
      16#38#, 16#c3#, 16#2a#, 16#4d#, 16#8e#, 16#c0#, 16#79#, 16#cd#, 
      16#09#, 16#9d#, 16#37#, 16#d9#, 16#54#, 16#ab#, 16#7e#, 16#f2#, 
      16#80#, 16#09#, 16#02#, 16#cd#, 16#f7#, 16#c7#, 16#a1#, 16#9f#, 
      16#b1#, 16#4b#, 16#3c#, 16#98#, 16#aa#, 16#f4#, 16#c6#, 16#ad#, 
      16#93#, 16#fe#, 16#9a#, 16#9b#, 16#c7#, 16#a6#, 16#12#, 16#29#, 
      16#82#, 16#8e#, 16#55#, 16#ad#, 16#4d#, 16#62#, 16#70#, 16#d1#, 
      16#bd#, 16#bc#, 16#a9#, 16#97#, 16#5d#, 16#45#, 16#0f#, 16#9b#, 
      16#e9#, 16#1e#, 16#56# 
   );
   FIPS_864  : constant Byte_Seq := (
      16#ff#, 16#bc#, 16#7c#, 16#47#, 16#f5#, 16#2e#, 16#69#, 16#f5#, 
      16#c6#, 16#67#, 16#f4#, 16#ed#, 16#57#, 16#8b#, 16#46#, 16#ff#, 
      16#45#, 16#92#, 16#04#, 16#8f#, 16#78#, 16#90#, 16#81#, 16#f3#, 
      16#fb#, 16#39#, 16#32#, 16#1d#, 16#0a#, 16#a4#, 16#62#, 16#7a#, 
      16#6d#, 16#4f#, 16#26#, 16#19#, 16#05#, 16#64#, 16#94#, 16#10#, 
      16#a5#, 16#3a#, 16#30#, 16#1c#, 16#23#, 16#1f#, 16#a7#, 16#87#, 
      16#ae#, 16#55#, 16#c0#, 16#4f#, 16#61#, 16#5a#, 16#8f#, 16#84#, 
      16#19#, 16#6c#, 16#ec#, 16#f2#, 16#84#, 16#4d#, 16#23#, 16#00#, 
      16#7b#, 16#44#, 16#ed#, 16#d8#, 16#92#, 16#64#, 16#9f#, 16#c8#, 
      16#ed#, 16#10#, 16#a2#, 16#e8#, 16#55#, 16#bf#, 16#23#, 16#fe#, 
      16#8a#, 16#fd#, 16#0b#, 16#9e#, 16#db#, 16#b3#, 16#32#, 16#96#, 
      16#f5#, 16#a7#, 16#cf#, 16#89#, 16#f9#, 16#46#, 16#34#, 16#d9#, 
      16#d1#, 16#a2#, 16#b8#, 16#ca#, 16#c3#, 16#b7#, 16#f4#, 16#e5#, 
      16#46#, 16#f2#, 16#32#, 16#9b#
   );
   FIPS_872  : constant Byte_Seq := (
      16#a3#, 16#9f#, 16#20#, 16#2d#, 16#86#, 16#6e#, 16#8e#, 16#96#, 
      16#76#, 16#5f#, 16#bb#, 16#53#, 16#b6#, 16#77#, 16#25#, 16#37#, 
      16#de#, 16#c0#, 16#43#, 16#32#, 16#2f#, 16#4a#, 16#74#, 16#75#, 
      16#24#, 16#70#, 16#36#, 16#d7#, 16#49#, 16#5c#, 16#98#, 16#78#, 
      16#50#, 16#ce#, 16#f2#, 16#a4#, 16#62#, 16#18#, 16#d3#, 16#fa#, 
      16#b3#, 16#6e#, 16#3b#, 16#cd#, 16#59#, 16#5c#, 16#0a#, 16#ca#, 
      16#5e#, 16#98#, 16#b9#, 16#db#, 16#14#, 16#fa#, 16#48#, 16#4c#, 
      16#a8#, 16#c9#, 16#77#, 16#2d#, 16#fa#, 16#38#, 16#39#, 16#f7#, 
      16#ac#, 16#30#, 16#66#, 16#72#, 16#7a#, 16#50#, 16#b0#, 16#d5#, 
      16#c9#, 16#33#, 16#d8#, 16#2f#, 16#82#, 16#f1#, 16#22#, 16#07#, 
      16#20#, 16#e8#, 16#06#, 16#3f#, 16#08#, 16#bc#, 16#28#, 16#3f#, 
      16#19#, 16#9c#, 16#8a#, 16#4f#, 16#85#, 16#c7#, 16#00#, 16#43#, 
      16#df#, 16#4f#, 16#e5#, 16#5e#, 16#75#, 16#1d#, 16#0d#, 16#71#, 
      16#df#, 16#36#, 16#fa#, 16#43#, 16#d8#
 );
   FIPS_880  : constant Byte_Seq := (
      16#b2#, 16#c8#, 16#26#, 16#18#, 16#53#, 16#e2#, 16#21#, 16#8d#, 
      16#fa#, 16#13#, 16#5c#, 16#b5#, 16#38#, 16#78#, 16#10#, 16#35#, 
      16#2b#, 16#89#, 16#62#, 16#e9#, 16#4e#, 16#9f#, 16#dc#, 16#86#, 
      16#95#, 16#b4#, 16#1e#, 16#7d#, 16#ba#, 16#6a#, 16#d1#, 16#22#, 
      16#d1#, 16#4f#, 16#dd#, 16#0d#, 16#23#, 16#60#, 16#dc#, 16#c0#, 
      16#39#, 16#cc#, 16#ce#, 16#8b#, 16#37#, 16#fa#, 16#0e#, 16#ad#, 
      16#6c#, 16#cc#, 16#85#, 16#bc#, 16#26#, 16#26#, 16#1d#, 16#47#, 
      16#cb#, 16#aa#, 16#78#, 16#b9#, 16#25#, 16#c6#, 16#e3#, 16#80#, 
      16#fe#, 16#f1#, 16#85#, 16#6f#, 16#ed#, 16#31#, 16#dc#, 16#61#, 
      16#6f#, 16#e1#, 16#6b#, 16#20#, 16#39#, 16#b1#, 16#ac#, 16#85#, 
      16#cd#, 16#ee#, 16#4c#, 16#e0#, 16#4c#, 16#04#, 16#97#, 16#99#, 
      16#8b#, 16#41#, 16#32#, 16#18#, 16#68#, 16#db#, 16#08#, 16#e3#, 
      16#5f#, 16#35#, 16#86#, 16#06#, 16#58#, 16#5e#, 16#0b#, 16#b8#, 
      16#c3#, 16#da#, 16#9a#, 16#3b#, 16#e7#, 16#a6#
   );
   FIPS_888  : constant Byte_Seq := (
      16#a0#, 16#4f#, 16#39#, 16#0a#, 16#9c#, 16#c2#, 16#ef#, 16#fa#, 
      16#d0#, 16#5d#, 16#b8#, 16#0d#, 16#90#, 16#76#, 16#a8#, 16#d4#, 
      16#b6#, 16#cc#, 16#8b#, 16#ba#, 16#97#, 16#b2#, 16#7b#, 16#42#, 
      16#36#, 16#70#, 16#b2#, 16#90#, 16#b8#, 16#e6#, 16#9c#, 16#2b#, 
      16#18#, 16#72#, 16#30#, 16#01#, 16#1c#, 16#14#, 16#81#, 16#ac#, 
      16#88#, 16#d0#, 16#90#, 16#f3#, 16#91#, 16#54#, 16#65#, 16#94#, 
      16#94#, 16#db#, 16#5e#, 16#41#, 16#08#, 16#51#, 16#c6#, 16#e8#, 
      16#b2#, 16#b8#, 16#a9#, 16#37#, 16#17#, 16#ca#, 16#e7#, 16#60#, 
      16#37#, 16#e0#, 16#88#, 16#19#, 16#78#, 16#12#, 16#4f#, 16#e7#, 
      16#e1#, 16#a0#, 16#92#, 16#9d#, 16#88#, 16#91#, 16#49#, 16#1f#, 
      16#4e#, 16#99#, 16#64#, 16#6c#, 16#c9#, 16#40#, 16#62#, 16#dc#, 
      16#82#, 16#41#, 16#1f#, 16#a6#, 16#61#, 16#30#, 16#ed#, 16#a4#, 
      16#65#, 16#60#, 16#e7#, 16#5b#, 16#98#, 16#04#, 16#82#, 16#36#, 
      16#43#, 16#94#, 16#65#, 16#12#, 16#5e#, 16#73#, 16#7b# 
   );
   FIPS_896  : constant Byte_Seq := (
      16#f4#, 16#19#, 16#49#, 16#4c#, 16#3c#, 16#6d#, 16#07#, 16#27#, 
      16#b3#, 16#39#, 16#5a#, 16#48#, 16#3a#, 16#21#, 16#67#, 16#18#, 
      16#2a#, 16#72#, 16#52#, 16#f4#, 16#fd#, 16#09#, 16#9c#, 16#2d#, 
      16#4b#, 16#71#, 16#b0#, 16#53#, 16#f9#, 16#4b#, 16#b8#, 16#b3#, 
      16#ad#, 16#f3#, 16#b5#, 16#1e#, 16#84#, 16#60#, 16#cf#, 16#ec#, 
      16#08#, 16#4c#, 16#e9#, 16#41#, 16#5c#, 16#95#, 16#79#, 16#8f#, 
      16#ba#, 16#e4#, 16#97#, 16#5c#, 16#20#, 16#8c#, 16#54#, 16#46#, 
      16#45#, 16#b5#, 16#4c#, 16#44#, 16#d2#, 16#b9#, 16#7f#, 16#2e#, 
      16#cf#, 16#ce#, 16#5c#, 16#80#, 16#5b#, 16#e6#, 16#1f#, 16#5b#, 
      16#a1#, 16#d3#, 16#5d#, 16#cc#, 16#07#, 16#af#, 16#dd#, 16#51#, 
      16#a8#, 16#7b#, 16#aa#, 16#99#, 16#05#, 16#06#, 16#66#, 16#8c#, 
      16#f7#, 16#10#, 16#e1#, 16#8b#, 16#e9#, 16#b0#, 16#eb#, 16#f9#, 
      16#43#, 16#f3#, 16#66#, 16#fa#, 16#29#, 16#c6#, 16#9f#, 16#7a#, 
      16#66#, 16#16#, 16#de#, 16#72#, 16#a3#, 16#35#, 16#3b#, 16#66#
   );
   FIPS_904  : constant Byte_Seq := (
      16#aa#, 16#f7#, 16#58#, 16#4d#, 16#53#, 16#00#, 16#6c#, 16#bf#, 
      16#2d#, 16#20#, 16#40#, 16#e5#, 16#1b#, 16#7f#, 16#ee#, 16#bd#, 
      16#2b#, 16#bf#, 16#1e#, 16#9f#, 16#6d#, 16#81#, 16#7c#, 16#d8#, 
      16#06#, 16#2a#, 16#6a#, 16#96#, 16#80#, 16#e7#, 16#f1#, 16#04#, 
      16#64#, 16#ee#, 16#fe#, 16#b5#, 16#0b#, 16#07#, 16#cb#, 16#46#, 
      16#b1#, 16#4b#, 16#9b#, 16#3f#, 16#cb#, 16#2c#, 16#aa#, 16#3b#, 
      16#9a#, 16#b6#, 16#64#, 16#49#, 16#01#, 16#15#, 16#d5#, 16#91#, 
      16#94#, 16#56#, 16#61#, 16#3b#, 16#f1#, 16#72#, 16#b5#, 16#8c#, 
      16#53#, 16#88#, 16#fd#, 16#52#, 16#64#, 16#6a#, 16#57#, 16#83#, 
      16#53#, 16#5b#, 16#88#, 16#21#, 16#27#, 16#17#, 16#ef#, 16#60#, 
      16#53#, 16#14#, 16#b7#, 16#0b#, 16#8a#, 16#08#, 16#50#, 16#24#, 
      16#d4#, 16#ab#, 16#1f#, 16#cb#, 16#e2#, 16#be#, 16#74#, 16#60#, 
      16#9e#, 16#4c#, 16#bd#, 16#ec#, 16#07#, 16#30#, 16#fa#, 16#bd#, 
      16#3c#, 16#d7#, 16#71#, 16#51#, 16#d6#, 16#47#, 16#a3#, 16#76#, 
      16#7b# 
   );
   FIPS_912  : constant Byte_Seq := (
      16#a4#, 16#67#, 16#f7#, 16#73#, 16#69#, 16#73#, 16#02#, 16#01#, 
      16#f2#, 16#81#, 16#22#, 16#04#, 16#fd#, 16#63#, 16#ad#, 16#0d#, 
      16#27#, 16#57#, 16#be#, 16#58#, 16#0d#, 16#93#, 16#7d#, 16#fe#, 
      16#b2#, 16#21#, 16#a0#, 16#6b#, 16#21#, 16#ed#, 16#32#, 16#13#, 
      16#53#, 16#1d#, 16#93#, 16#61#, 16#52#, 16#a0#, 16#c1#, 16#f0#, 
      16#9f#, 16#0a#, 16#d5#, 16#fe#, 16#d1#, 16#9f#, 16#d1#, 16#1e#, 
      16#80#, 16#ad#, 16#98#, 16#2c#, 16#61#, 16#20#, 16#3e#, 16#86#, 
      16#b2#, 16#50#, 16#82#, 16#79#, 16#d9#, 16#1d#, 16#99#, 16#fa#, 
      16#48#, 16#3e#, 16#2e#, 16#97#, 16#a3#, 16#d6#, 16#a6#, 16#ad#, 
      16#25#, 16#48#, 16#a8#, 16#da#, 16#40#, 16#4d#, 16#dd#, 16#b5#, 
      16#83#, 16#44#, 16#f4#, 16#bd#, 16#c1#, 16#c9#, 16#ea#, 16#90#, 
      16#70#, 16#88#, 16#88#, 16#5e#, 16#4f#, 16#53#, 16#2d#, 16#9c#, 
      16#4c#, 16#73#, 16#cd#, 16#fd#, 16#a4#, 16#3c#, 16#3a#, 16#9e#, 
      16#4c#, 16#e5#, 16#a2#, 16#80#, 16#90#, 16#96#, 16#59#, 16#3c#, 
      16#fa#, 16#c1# 
   );
   FIPS_920  : constant Byte_Seq := (
      16#01#, 16#ab#, 16#c9#, 16#0e#, 16#91#, 16#80#, 16#fc#, 16#9b#, 
      16#b8#, 16#ea#, 16#67#, 16#a4#, 16#05#, 16#07#, 16#3e#, 16#d6#, 
      16#84#, 16#8b#, 16#f3#, 16#30#, 16#48#, 16#07#, 16#65#, 16#66#, 
      16#47#, 16#6c#, 16#55#, 16#83#, 16#6b#, 16#cb#, 16#19#, 16#d3#, 
      16#e5#, 16#5e#, 16#94#, 16#00#, 16#c5#, 16#cc#, 16#65#, 16#7b#, 
      16#c7#, 16#a9#, 16#5f#, 16#1d#, 16#70#, 16#3c#, 16#39#, 16#0f#, 
      16#5a#, 16#86#, 16#87#, 16#e7#, 16#cd#, 16#7f#, 16#e9#, 16#13#, 
      16#8e#, 16#a3#, 16#83#, 16#7b#, 16#fc#, 16#ad#, 16#ad#, 16#62#, 
      16#58#, 16#a3#, 16#eb#, 16#8d#, 16#65#, 16#12#, 16#1f#, 16#a8#, 
      16#31#, 16#9b#, 16#fd#, 16#e5#, 16#32#, 16#ae#, 16#c0#, 16#e6#, 
      16#94#, 16#96#, 16#1b#, 16#dd#, 16#d2#, 16#b6#, 16#73#, 16#f2#, 
      16#84#, 16#12#, 16#4b#, 16#e5#, 16#78#, 16#11#, 16#00#, 16#f4#, 
      16#03#, 16#81#, 16#b6#, 16#ff#, 16#99#, 16#db#, 16#92#, 16#ea#, 
      16#9c#, 16#c8#, 16#2a#, 16#43#, 16#72#, 16#e5#, 16#39#, 16#24#, 
      16#da#, 16#c3#, 16#98# 
   );
   FIPS_928  : constant Byte_Seq := (
      16#b5#, 16#55#, 16#d9#, 16#90#, 16#56#, 16#36#, 16#2b#, 16#fc#, 
      16#2b#, 16#ac#, 16#2a#, 16#1b#, 16#bb#, 16#71#, 16#ba#, 16#11#, 
      16#2d#, 16#64#, 16#4e#, 16#50#, 16#b8#, 16#2b#, 16#01#, 16#5e#, 
      16#5a#, 16#1c#, 16#e3#, 16#d9#, 16#cd#, 16#5e#, 16#90#, 16#b8#, 
      16#b7#, 16#4b#, 16#08#, 16#d3#, 16#21#, 16#19#, 16#ba#, 16#a6#, 
      16#2a#, 16#ba#, 16#e2#, 16#51#, 16#fc#, 16#00#, 16#15#, 16#e4#, 
      16#00#, 16#05#, 16#1a#, 16#da#, 16#4e#, 16#ca#, 16#fc#, 16#e3#, 
      16#68#, 16#1e#, 16#5d#, 16#e7#, 16#27#, 16#c2#, 16#0d#, 16#47#, 
      16#f5#, 16#ca#, 16#dc#, 16#66#, 16#3d#, 16#46#, 16#ac#, 16#68#, 
      16#20#, 16#22#, 16#ca#, 16#39#, 16#6a#, 16#4b#, 16#7e#, 16#d1#, 
      16#c4#, 16#13#, 16#e0#, 16#b7#, 16#2b#, 16#d7#, 16#ee#, 16#c4#, 
      16#a0#, 16#df#, 16#dc#, 16#2a#, 16#21#, 16#85#, 16#ab#, 16#b5#, 
      16#d9#, 16#9a#, 16#fd#, 16#50#, 16#94#, 16#05#, 16#28#, 16#ca#, 
      16#75#, 16#ad#, 16#89#, 16#da#, 16#eb#, 16#9a#, 16#1b#, 16#61#, 
      16#e1#, 16#57#, 16#47#, 16#f0# 
   );
   FIPS_936  : constant Byte_Seq := (
      16#14#, 16#fb#, 16#01#, 16#ae#, 16#9d#, 16#60#, 16#15#, 16#ec#, 
      16#b3#, 16#e5#, 16#6d#, 16#6e#, 16#cd#, 16#fa#, 16#4b#, 16#c0#, 
      16#53#, 16#31#, 16#86#, 16#ad#, 16#f8#, 16#45#, 16#7f#, 16#5e#, 
      16#4a#, 16#5c#, 16#57#, 16#c6#, 16#87#, 16#89#, 16#5f#, 16#3d#, 
      16#b3#, 16#95#, 16#d0#, 16#6a#, 16#e7#, 16#ff#, 16#bd#, 16#67#, 
      16#ec#, 16#41#, 16#45#, 16#20#, 16#09#, 16#55#, 16#0d#, 16#fc#, 
      16#18#, 16#78#, 16#ee#, 16#c0#, 16#df#, 16#2e#, 16#ea#, 16#b0#, 
      16#9e#, 16#86#, 16#65#, 16#f7#, 16#e5#, 16#9f#, 16#91#, 16#48#, 
      16#a8#, 16#6b#, 16#2b#, 16#c6#, 16#95#, 16#b3#, 16#65#, 16#21#, 
      16#a5#, 16#5b#, 16#23#, 16#02#, 16#f2#, 16#e8#, 16#69#, 16#aa#, 
      16#c8#, 16#3f#, 16#14#, 16#d6#, 16#fe#, 16#af#, 16#c9#, 16#e5#, 
      16#87#, 16#32#, 16#2c#, 16#3c#, 16#44#, 16#f0#, 16#52#, 16#ea#, 
      16#1c#, 16#05#, 16#78#, 16#88#, 16#4f#, 16#84#, 16#f5#, 16#63#, 
      16#07#, 16#bc#, 16#6d#, 16#de#, 16#31#, 16#ba#, 16#48#, 16#11#, 
      16#8a#, 16#0f#, 16#62#, 16#b6#, 16#fd# 
   );
   FIPS_944  : constant Byte_Seq := (
      16#11#, 16#ae#, 16#0c#, 16#bf#, 16#ee#, 16#7b#, 16#b3#, 16#df#, 
      16#90#, 16#ce#, 16#58#, 16#5f#, 16#09#, 16#b9#, 16#cf#, 16#8f#, 
      16#f5#, 16#be#, 16#a6#, 16#9a#, 16#68#, 16#ee#, 16#b6#, 16#c2#, 
      16#25#, 16#53#, 16#f8#, 16#ed#, 16#11#, 16#8c#, 16#9a#, 16#61#, 
      16#e7#, 16#b7#, 16#52#, 16#cc#, 16#2c#, 16#94#, 16#f3#, 16#87#, 
      16#66#, 16#e6#, 16#3e#, 16#1b#, 16#89#, 16#1d#, 16#fa#, 16#05#, 
      16#b2#, 16#33#, 16#47#, 16#b6#, 16#17#, 16#d4#, 16#2f#, 16#de#, 
      16#3e#, 16#c1#, 16#7e#, 16#ea#, 16#6e#, 16#76#, 16#d3#, 16#cb#, 
      16#64#, 16#0b#, 16#f8#, 16#fa#, 16#46#, 16#58#, 16#6f#, 16#b9#, 
      16#dd#, 16#5c#, 16#4d#, 16#9b#, 16#fe#, 16#e0#, 16#4c#, 16#46#, 
      16#49#, 16#57#, 16#1b#, 16#78#, 16#17#, 16#09#, 16#f8#, 16#48#, 
      16#ad#, 16#70#, 16#81#, 16#af#, 16#b6#, 16#e2#, 16#c7#, 16#46#, 
      16#f0#, 16#71#, 16#a5#, 16#51#, 16#25#, 16#10#, 16#50#, 16#fd#, 
      16#5d#, 16#f7#, 16#2e#, 16#e6#, 16#52#, 16#48#, 16#ec#, 16#dc#, 
      16#24#, 16#f2#, 16#cb#, 16#e7#, 16#4e#, 16#d5# 
   );
   FIPS_952  : constant Byte_Seq := (
      16#a5#, 16#c4#, 16#a4#, 16#7a#, 16#04#, 16#f4#, 16#71#, 16#42#, 
      16#69#, 16#d5#, 16#d9#, 16#22#, 16#ba#, 16#46#, 16#94#, 16#06#, 
      16#0a#, 16#a2#, 16#df#, 16#49#, 16#19#, 16#37#, 16#20#, 16#c8#, 
      16#19#, 16#fa#, 16#c9#, 16#3b#, 16#b8#, 16#78#, 16#7e#, 16#c5#, 
      16#5a#, 16#10#, 16#7a#, 16#c9#, 16#a6#, 16#60#, 16#2f#, 16#00#, 
      16#45#, 16#fd#, 16#2c#, 16#c8#, 16#e6#, 16#67#, 16#44#, 16#bf#, 
      16#86#, 16#3c#, 16#ed#, 16#91#, 16#ee#, 16#ab#, 16#e6#, 16#0e#, 
      16#7d#, 16#2c#, 16#1d#, 16#80#, 16#27#, 16#6e#, 16#cf#, 16#3b#, 
      16#be#, 16#91#, 16#f1#, 16#75#, 16#70#, 16#96#, 16#cf#, 16#58#, 
      16#92#, 16#14#, 16#f3#, 16#56#, 16#9c#, 16#2c#, 16#48#, 16#bd#, 
      16#74#, 16#be#, 16#7f#, 16#8b#, 16#ef#, 16#dd#, 16#b2#, 16#83#, 
      16#95#, 16#81#, 16#47#, 16#80#, 16#a4#, 16#7c#, 16#18#, 16#0a#, 
      16#58#, 16#b0#, 16#d0#, 16#27#, 16#6a#, 16#7e#, 16#98#, 16#73#, 
      16#d6#, 16#82#, 16#f4#, 16#73#, 16#e2#, 16#7d#, 16#e7#, 16#27#, 
      16#5c#, 16#92#, 16#5e#, 16#de#, 16#23#, 16#b6#, 16#cc# 
   );
   FIPS_960  : constant Byte_Seq := (
      16#75#, 16#26#, 16#47#, 16#74#, 16#af#, 16#69#, 16#ec#, 16#7e#, 
      16#e3#, 16#12#, 16#5e#, 16#20#, 16#5b#, 16#d6#, 16#d1#, 16#cb#, 
      16#8f#, 16#db#, 16#22#, 16#f7#, 16#ea#, 16#6d#, 16#be#, 16#72#, 
      16#d1#, 16#f2#, 16#c0#, 16#f7#, 16#e2#, 16#20#, 16#59#, 16#02#, 
      16#79#, 16#6d#, 16#75#, 16#e3#, 16#79#, 16#c7#, 16#9b#, 16#11#, 
      16#49#, 16#86#, 16#15#, 16#c2#, 16#1c#, 16#9f#, 16#52#, 16#b8#, 
      16#76#, 16#1a#, 16#88#, 16#5e#, 16#ec#, 16#c6#, 16#9d#, 16#13#, 
      16#2b#, 16#2b#, 16#48#, 16#c6#, 16#3b#, 16#c0#, 16#74#, 16#c3#, 
      16#05#, 16#5e#, 16#e5#, 16#cc#, 16#13#, 16#f5#, 16#1d#, 16#6c#, 
      16#98#, 16#7e#, 16#81#, 16#88#, 16#b0#, 16#30#, 16#b8#, 16#37#, 
      16#e8#, 16#f7#, 16#54#, 16#d4#, 16#01#, 16#22#, 16#b4#, 16#51#, 
      16#f1#, 16#5b#, 16#28#, 16#cd#, 16#2b#, 16#dd#, 16#57#, 16#69#, 
      16#20#, 16#e1#, 16#de#, 16#58#, 16#06#, 16#59#, 16#3a#, 16#36#, 
      16#d8#, 16#e1#, 16#e8#, 16#9b#, 16#9e#, 16#f3#, 16#ca#, 16#ef#, 
      16#ee#, 16#5a#, 16#cd#, 16#80#, 16#b3#, 16#e9#, 16#c9#, 16#d1#
   );
   FIPS_968  : constant Byte_Seq := (
      16#79#, 16#1a#, 16#36#, 16#d7#, 16#48#, 16#69#, 16#5e#, 16#62#, 
      16#db#, 16#50#, 16#03#, 16#a8#, 16#ad#, 16#36#, 16#7d#, 16#f1#, 
      16#f0#, 16#51#, 16#c1#, 16#ac#, 16#6a#, 16#21#, 16#d7#, 16#11#, 
      16#82#, 16#3e#, 16#8e#, 16#06#, 16#9b#, 16#54#, 16#6e#, 16#3f#, 
      16#a0#, 16#6c#, 16#ee#, 16#aa#, 16#e0#, 16#6d#, 16#e7#, 16#0a#, 
      16#1d#, 16#e2#, 16#49#, 16#e1#, 16#df#, 16#fd#, 16#0d#, 16#94#, 
      16#0e#, 16#dc#, 16#6a#, 16#ca#, 16#c0#, 16#0c#, 16#4c#, 16#15#, 
      16#50#, 16#4c#, 16#02#, 16#d4#, 16#b0#, 16#93#, 16#36#, 16#58#, 
      16#00#, 16#54#, 16#23#, 16#45#, 16#5f#, 16#00#, 16#02#, 16#3b#, 
      16#01#, 16#cd#, 16#c5#, 16#b6#, 16#81#, 16#b6#, 16#08#, 16#33#, 
      16#79#, 16#c2#, 16#45#, 16#95#, 16#51#, 16#8a#, 16#47#, 16#c6#, 
      16#54#, 16#f5#, 16#e1#, 16#a1#, 16#09#, 16#47#, 16#df#, 16#10#, 
      16#c0#, 16#5a#, 16#3d#, 16#71#, 16#6b#, 16#2a#, 16#97#, 16#3f#, 
      16#af#, 16#98#, 16#e1#, 16#ee#, 16#3b#, 16#67#, 16#58#, 16#16#, 
      16#59#, 16#8b#, 16#b8#, 16#d4#, 16#c2#, 16#a3#, 16#b0#, 16#6e#, 
      16#b7# 
   );
   FIPS_976  : constant Byte_Seq := (
      16#74#, 16#cd#, 16#86#, 16#bb#, 16#ed#, 16#14#, 16#d8#, 16#95#, 
      16#30#, 16#1d#, 16#8a#, 16#54#, 16#b2#, 16#95#, 16#6b#, 16#1c#, 
      16#5c#, 16#d1#, 16#45#, 16#1e#, 16#eb#, 16#ab#, 16#62#, 16#0b#, 
      16#97#, 16#8d#, 16#4e#, 16#ce#, 16#f2#, 16#cb#, 16#df#, 16#7a#, 
      16#14#, 16#36#, 16#73#, 16#81#, 16#f5#, 16#ee#, 16#79#, 16#28#, 
      16#1a#, 16#77#, 16#33#, 16#37#, 16#74#, 16#0f#, 16#b9#, 16#f5#, 
      16#85#, 16#3f#, 16#42#, 16#53#, 16#c4#, 16#b1#, 16#9f#, 16#68#, 
      16#43#, 16#41#, 16#08#, 16#1d#, 16#8f#, 16#56#, 16#1b#, 16#2a#, 
      16#d7#, 16#73#, 16#22#, 16#41#, 16#51#, 16#09#, 16#95#, 16#88#, 
      16#da#, 16#90#, 16#e0#, 16#4d#, 16#dd#, 16#d5#, 16#65#, 16#f6#, 
      16#75#, 16#96#, 16#c5#, 16#36#, 16#d6#, 16#4c#, 16#5b#, 16#87#, 
      16#e9#, 16#48#, 16#0a#, 16#d4#, 16#36#, 16#01#, 16#39#, 16#75#, 
      16#07#, 16#ad#, 16#1b#, 16#61#, 16#ca#, 16#0e#, 16#34#, 16#9f#, 
      16#b8#, 16#8f#, 16#19#, 16#fe#, 16#b4#, 16#8f#, 16#77#, 16#06#, 
      16#76#, 16#fd#, 16#56#, 16#2e#, 16#e8#, 16#25#, 16#9f#, 16#50#, 
      16#d0#, 16#c9# 
   );
   FIPS_984  : constant Byte_Seq := (
      16#46#, 16#61#, 16#2e#, 16#1a#, 16#4d#, 16#01#, 16#6c#, 16#41#, 
      16#70#, 16#0a#, 16#3b#, 16#5c#, 16#cb#, 16#38#, 16#32#, 16#33#, 
      16#53#, 16#bd#, 16#8d#, 16#a5#, 16#b9#, 16#94#, 16#2c#, 16#9c#, 
      16#92#, 16#12#, 16#df#, 16#40#, 16#b4#, 16#be#, 16#e0#, 16#6b#, 
      16#e3#, 16#62#, 16#a1#, 16#5d#, 16#ad#, 16#62#, 16#c8#, 16#b2#, 
      16#92#, 16#4d#, 16#78#, 16#91#, 16#68#, 16#b2#, 16#d3#, 16#25#, 
      16#fe#, 16#35#, 16#bd#, 16#51#, 16#00#, 16#e1#, 16#e2#, 16#9f#, 
      16#1a#, 16#c0#, 16#fa#, 16#7a#, 16#60#, 16#a9#, 16#4c#, 16#9e#, 
      16#ee#, 16#5a#, 16#70#, 16#cc#, 16#cb#, 16#c7#, 16#5a#, 16#c2#, 
      16#14#, 16#b1#, 16#94#, 16#6a#, 16#56#, 16#79#, 16#cb#, 16#52#, 
      16#3b#, 16#37#, 16#8d#, 16#5c#, 16#69#, 16#07#, 16#51#, 16#b7#, 
      16#a7#, 16#a3#, 16#b8#, 16#0d#, 16#41#, 16#37#, 16#12#, 16#fe#, 
      16#ae#, 16#70#, 16#24#, 16#ce#, 16#71#, 16#d6#, 16#29#, 16#5a#, 
      16#3d#, 16#5d#, 16#16#, 16#51#, 16#5c#, 16#36#, 16#22#, 16#a0#, 
      16#52#, 16#eb#, 16#86#, 16#2e#, 16#bd#, 16#ab#, 16#81#, 16#ca#, 
      16#7f#, 16#e3#, 16#a0# 
   );
   FIPS_992  : constant Byte_Seq := (
      16#1a#, 16#85#, 16#7c#, 16#1f#, 16#10#, 16#5d#, 16#06#, 16#8c#, 
      16#ea#, 16#b0#, 16#b1#, 16#e1#, 16#24#, 16#94#, 16#89#, 16#0e#, 
      16#c1#, 16#96#, 16#36#, 16#2a#, 16#48#, 16#b0#, 16#20#, 16#0a#, 
      16#0d#, 16#75#, 16#d7#, 16#12#, 16#b1#, 16#8f#, 16#b1#, 16#4b#, 
      16#ec#, 16#6b#, 16#b5#, 16#b6#, 16#8a#, 16#33#, 16#b7#, 16#e0#, 
      16#b4#, 16#fd#, 16#c5#, 16#b7#, 16#71#, 16#42#, 16#c2#, 16#9c#, 
      16#6d#, 16#91#, 16#51#, 16#b9#, 16#f8#, 16#84#, 16#f5#, 16#95#, 
      16#51#, 16#f4#, 16#76#, 16#e5#, 16#25#, 16#69#, 16#86#, 16#a6#, 
      16#53#, 16#d4#, 16#a4#, 16#68#, 16#f2#, 16#81#, 16#41#, 16#ed#, 
      16#95#, 16#47#, 16#21#, 16#f2#, 16#cd#, 16#02#, 16#05#, 16#4d#, 
      16#f0#, 16#43#, 16#87#, 16#38#, 16#19#, 16#45#, 16#45#, 16#ed#, 
      16#70#, 16#23#, 16#41#, 16#73#, 16#ac#, 16#49#, 16#88#, 16#b7#, 
      16#d6#, 16#28#, 16#12#, 16#de#, 16#4f#, 16#2f#, 16#ea#, 16#da#, 
      16#14#, 16#f6#, 16#8e#, 16#3b#, 16#41#, 16#bc#, 16#99#, 16#48#, 
      16#d4#, 16#13#, 16#9f#, 16#4f#, 16#b4#, 16#da#, 16#59#, 16#39#, 
      16#f2#, 16#6c#, 16#02#, 16#61# 
   );
   FIPS_1000 : constant Byte_Seq := (
      16#9d#, 16#36#, 16#81#, 16#8d#, 16#0c#, 16#5a#, 16#00#, 16#8b#, 
      16#e7#, 16#90#, 16#4d#, 16#19#, 16#17#, 16#aa#, 16#3e#, 16#cc#, 
      16#b5#, 16#ef#, 16#4f#, 16#38#, 16#ce#, 16#cb#, 16#8c#, 16#4e#, 
      16#63#, 16#c4#, 16#b2#, 16#e9#, 16#b4#, 16#b0#, 16#91#, 16#a3#, 
      16#bf#, 16#25#, 16#b4#, 16#ed#, 16#03#, 16#32#, 16#44#, 16#5f#, 
      16#89#, 16#4c#, 16#2a#, 16#4c#, 16#25#, 16#8b#, 16#74#, 16#9a#, 
      16#fa#, 16#17#, 16#fa#, 16#d0#, 16#3c#, 16#dd#, 16#41#, 16#71#, 
      16#3a#, 16#86#, 16#9f#, 16#89#, 16#9b#, 16#a9#, 16#a0#, 16#85#, 
      16#e7#, 16#3f#, 16#a9#, 16#47#, 16#4a#, 16#58#, 16#db#, 16#7a#, 
      16#95#, 16#0d#, 16#3a#, 16#23#, 16#86#, 16#b6#, 16#0f#, 16#79#, 
      16#49#, 16#5d#, 16#8b#, 16#f7#, 16#3e#, 16#72#, 16#ac#, 16#af#, 
      16#fd#, 16#bf#, 16#65#, 16#e1#, 16#98#, 16#9f#, 16#f9#, 16#cc#, 
      16#20#, 16#6b#, 16#a8#, 16#c4#, 16#6a#, 16#36#, 16#8d#, 16#85#, 
      16#12#, 16#ba#, 16#c7#, 16#c7#, 16#c1#, 16#91#, 16#d7#, 16#13#, 
      16#ac#, 16#a9#, 16#49#, 16#d4#, 16#5d#, 16#f2#, 16#97#, 16#b1#, 
      16#b6#, 16#59#, 16#4a#, 16#1a#, 16#33# 
   );
   FIPS_1008 : constant Byte_Seq := (
      16#4a#, 16#e5#, 16#0e#, 16#d6#, 16#26#, 16#ee#, 16#60#, 16#dc#, 
      16#5e#, 16#a5#, 16#56#, 16#e3#, 16#ce#, 16#0d#, 16#3c#, 16#18#, 
      16#b9#, 16#e6#, 16#22#, 16#5b#, 16#56#, 16#20#, 16#81#, 16#4e#, 
      16#8b#, 16#96#, 16#21#, 16#ac#, 16#f8#, 16#f9#, 16#39#, 16#dd#, 
      16#37#, 16#0a#, 16#d9#, 16#c7#, 16#62#, 16#0d#, 16#85#, 16#e6#, 
      16#d6#, 16#7a#, 16#22#, 16#9f#, 16#37#, 16#f5#, 16#17#, 16#d1#, 
      16#b5#, 16#80#, 16#ac#, 16#ae#, 16#8d#, 16#f0#, 16#b5#, 16#c9#, 
      16#d2#, 16#9d#, 16#75#, 16#6f#, 16#6d#, 16#5e#, 16#bd#, 16#3b#, 
      16#63#, 16#b5#, 16#54#, 16#e5#, 16#56#, 16#46#, 16#9b#, 16#5b#, 
      16#4f#, 16#8e#, 16#71#, 16#13#, 16#ba#, 16#d1#, 16#55#, 16#9f#, 
      16#b2#, 16#54#, 16#ca#, 16#82#, 16#7f#, 16#cd#, 16#00#, 16#42#, 
      16#5d#, 16#18#, 16#b0#, 16#be#, 16#7f#, 16#2b#, 16#48#, 16#c2#, 
      16#54#, 16#4c#, 16#48#, 16#d9#, 16#09#, 16#82#, 16#ec#, 16#62#, 
      16#4f#, 16#49#, 16#0b#, 16#e6#, 16#5e#, 16#89#, 16#3f#, 16#a9#, 
      16#3a#, 16#c9#, 16#46#, 16#7f#, 16#35#, 16#a0#, 16#a8#, 16#e1#, 
      16#b5#, 16#6d#, 16#9a#, 16#40#, 16#37#, 16#48# 
   );
   FIPS_1016 : constant Byte_Seq := (
      16#db#, 16#ed#, 16#76#, 16#12#, 16#44#, 16#8d#, 16#46#, 16#cb#, 
      16#e0#, 16#a3#, 16#84#, 16#d1#, 16#c9#, 16#32#, 16#33#, 16#f0#, 
      16#2f#, 16#fd#, 16#1c#, 16#98#, 16#4b#, 16#a7#, 16#65#, 16#29#, 
      16#95#, 16#18#, 16#65#, 16#6d#, 16#37#, 16#23#, 16#b7#, 16#66#, 
      16#c1#, 16#65#, 16#8d#, 16#4b#, 16#1e#, 16#70#, 16#47#, 16#cd#, 
      16#c7#, 16#29#, 16#45#, 16#9e#, 16#36#, 16#6e#, 16#f9#, 16#34#, 
      16#9e#, 16#fc#, 16#40#, 16#cb#, 16#d9#, 16#90#, 16#f2#, 16#a9#, 
      16#a2#, 16#4d#, 16#b7#, 16#a5#, 16#04#, 16#5e#, 16#1d#, 16#ea#, 
      16#12#, 16#dc#, 16#e8#, 16#f9#, 16#d9#, 16#f2#, 16#aa#, 16#ed#, 
      16#93#, 16#3f#, 16#93#, 16#03#, 16#1e#, 16#7b#, 16#89#, 16#59#, 
      16#ac#, 16#5e#, 16#7b#, 16#f6#, 16#bb#, 16#bd#, 16#f3#, 16#0b#, 
      16#48#, 16#f7#, 16#eb#, 16#78#, 16#3f#, 16#8f#, 16#e2#, 16#92#, 
      16#37#, 16#1a#, 16#2f#, 16#24#, 16#5c#, 16#5c#, 16#94#, 16#b4#, 
      16#ac#, 16#ae#, 16#16#, 16#07#, 16#67#, 16#a2#, 16#0c#, 16#e7#, 
      16#c0#, 16#ea#, 16#77#, 16#23#, 16#d9#, 16#76#, 16#91#, 16#d8#,
      16#ee#, 16#dd#, 16#a9#, 16#ef#, 16#d1#, 16#fe#, 16#2d# 
   );
   FIPS_1024 : constant Byte_Seq := (
      16#3b#, 16#f5#, 16#2c#, 16#c5#, 16#ee#, 16#86#, 16#b9#, 16#a0#, 
      16#19#, 16#0f#, 16#39#, 16#0a#, 16#5c#, 16#03#, 16#66#, 16#a5#, 
      16#60#, 16#b5#, 16#57#, 16#00#, 16#0d#, 16#be#, 16#51#, 16#15#, 
      16#fd#, 16#9e#, 16#e1#, 16#16#, 16#30#, 16#a6#, 16#27#, 16#69#, 
      16#01#, 16#15#, 16#75#, 16#f1#, 16#58#, 16#81#, 16#19#, 16#8f#, 
      16#22#, 16#78#, 16#76#, 16#e8#, 16#fe#, 16#68#, 16#5a#, 16#69#, 
      16#39#, 16#bc#, 16#8b#, 16#89#, 16#fd#, 16#48#, 16#a3#, 16#4e#, 
      16#c5#, 16#e7#, 16#1e#, 16#13#, 16#14#, 16#62#, 16#b2#, 16#88#, 
      16#67#, 16#94#, 16#df#, 16#fa#, 16#68#, 16#cc#, 16#c6#, 16#d5#, 
      16#64#, 16#73#, 16#3e#, 16#67#, 16#ff#, 16#ef#, 16#25#, 16#e6#, 
      16#27#, 16#c6#, 16#f4#, 16#b5#, 16#46#, 16#07#, 16#96#, 16#e3#, 
      16#bc#, 16#e6#, 16#7b#, 16#f5#, 16#8c#, 16#a6#, 16#e8#, 16#e5#, 
      16#55#, 16#bc#, 16#91#, 16#6a#, 16#85#, 16#31#, 16#69#, 16#7a#, 
      16#c9#, 16#48#, 16#b9#, 16#0d#, 16#c8#, 16#61#, 16#6f#, 16#25#, 
      16#10#, 16#1d#, 16#b9#, 16#0b#, 16#50#, 16#c3#, 16#d3#, 16#db#, 
      16#c9#, 16#e2#, 16#1e#, 16#42#, 16#ff#, 16#38#, 16#71#, 16#87#
   );

 begin
   --  Functional style interface
   R1 := Hash (FIPS_0);
   DH ("FIPS 180-4 len 0 functional API - SHA384 Hash is", R1);

   Hash (R1, FIPS_0);
   DH ("FIPS 180-4 len 0 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_8);
   DH ("FIPS 180-4 len 8 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_16);
   DH ("FIPS 180-4 len 16 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_24);
   DH ("FIPS 180-4 len 24 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_32);
   DH ("FIPS 180-4 len 32 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_40);
   DH ("FIPS 180-4 len 40 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_48);
   DH ("FIPS 180-4 len 48 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_56);
   DH ("FIPS 180-4 len 56 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_64);
   DH ("FIPS 180-4 len 64 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_72);
   DH ("FIPS 180-4 len 72 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_80);
   DH ("FIPS 180-4 len 80 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_88);
   DH ("FIPS 180-4 len 88 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_96);
   DH ("FIPS 180-4 len 96 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_104);
   DH ("FIPS 180-4 len 104 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_112);
   DH ("FIPS 180-4 len 112 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_120);
   DH ("FIPS 180-4 len 120 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_128);
   DH ("FIPS 180-4 len 128 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_136);
   DH ("FIPS 180-4 len 136 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_144);
   DH ("FIPS 180-4 len 144 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_152);
   DH ("FIPS 180-4 len 152 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_160);
   DH ("FIPS 180-4 len 160 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_168);
   DH ("FIPS 180-4 len 168 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_176);
   DH ("FIPS 180-4 len 176 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_184);
   DH ("FIPS 180-4 len 184 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_192);
   DH ("FIPS 180-4 len 192 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_200);
   DH ("FIPS 180-4 len 200 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_208);
   DH ("FIPS 180-4 len 208 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_216);
   DH ("FIPS 180-4 len 216 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_224);
   DH ("FIPS 180-4 len 224 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_232);
   DH ("FIPS 180-4 len 232 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_240);
   DH ("FIPS 180-4 len 240 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_248);
   DH ("FIPS 180-4 len 248 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_256);
   DH ("FIPS 180-4 len 256 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_264);
   DH ("FIPS 180-4 len 264 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_272);
   DH ("FIPS 180-4 len 272 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_280);
   DH ("FIPS 180-4 len 280 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_288);
   DH ("FIPS 180-4 len 288 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_296);
   DH ("FIPS 180-4 len 296 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_304);
   DH ("FIPS 180-4 len 304 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_312);
   DH ("FIPS 180-4 len 312 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_320);
   DH ("FIPS 180-4 len 320 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_328);
   DH ("FIPS 180-4 len 328 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_336);
   DH ("FIPS 180-4 len 336 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_344);
   DH ("FIPS 180-4 len 344 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_352);
   DH ("FIPS 180-4 len 352 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_360);
   DH ("FIPS 180-4 len 360 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_368);
   DH ("FIPS 180-4 len 368 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_376);
   DH ("FIPS 180-4 len 376 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_384);
   DH ("FIPS 180-4 len 384 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_392);
   DH ("FIPS 180-4 len 392 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_400);
   DH ("FIPS 180-4 len 400 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_408);
   DH ("FIPS 180-4 len 408 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_416);
   DH ("FIPS 180-4 len 416 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_424);
   DH ("FIPS 180-4 len 424 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_432);
   DH ("FIPS 180-4 len 432 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_440);
   DH ("FIPS 180-4 len 440 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_448);
   DH ("FIPS 180-4 len 448 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_456);
   DH ("FIPS 180-4 len 456 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_464);
   DH ("FIPS 180-4 len 464 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_472);
   DH ("FIPS 180-4 len 472 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_480);
   DH ("FIPS 180-4 len 480 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_488);
   DH ("FIPS 180-4 len 488 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_496);
   DH ("FIPS 180-4 len 496 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_504);
   DH ("FIPS 180-4 len 504 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_512);
   DH ("FIPS 180-4 len 512 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_520);
   DH ("FIPS 180-4 len 520 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_528);
   DH ("FIPS 180-4 len 528 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_536);
   DH ("FIPS 180-4 len 536 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_544);
   DH ("FIPS 180-4 len 544 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_552);
   DH ("FIPS 180-4 len 552 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_560);
   DH ("FIPS 180-4 len 560 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_568);
   DH ("FIPS 180-4 len 568 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_576);
   DH ("FIPS 180-4 len 576 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_584);
   DH ("FIPS 180-4 len 584 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_592);
   DH ("FIPS 180-4 len 592 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_600);
   DH ("FIPS 180-4 len 600 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_608);
   DH ("FIPS 180-4 len 608 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_616);
   DH ("FIPS 180-4 len 616 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_624);
   DH ("FIPS 180-4 len 624 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_632);
   DH ("FIPS 180-4 len 632 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_640);
   DH ("FIPS 180-4 len 640 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_648);
   DH ("FIPS 180-4 len 648 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_656);
   DH ("FIPS 180-4 len 656 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_664);
   DH ("FIPS 180-4 len 664 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_672);
   DH ("FIPS 180-4 len 672 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_680);
   DH ("FIPS 180-4 len 680 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_688);
   DH ("FIPS 180-4 len 688 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_696);
   DH ("FIPS 180-4 len 696 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_704);
   DH ("FIPS 180-4 len 704 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_712);
   DH ("FIPS 180-4 len 712 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_720);
   DH ("FIPS 180-4 len 720 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_728);
   DH ("FIPS 180-4 len 728 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_736);
   DH ("FIPS 180-4 len 736 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_744);
   DH ("FIPS 180-4 len 744 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_752);
   DH ("FIPS 180-4 len 752 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_760);
   DH ("FIPS 180-4 len 760 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_768);
   DH ("FIPS 180-4 len 768 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_776);
   DH ("FIPS 180-4 len 776 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_784);
   DH ("FIPS 180-4 len 784 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_792);
   DH ("FIPS 180-4 len 792 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_800);
   DH ("FIPS 180-4 len 800 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_808);
   DH ("FIPS 180-4 len 808 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_816);
   DH ("FIPS 180-4 len 816 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_824);
   DH ("FIPS 180-4 len 824 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_832);
   DH ("FIPS 180-4 len 832 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_840);
   DH ("FIPS 180-4 len 840 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_848);
   DH ("FIPS 180-4 len 848 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_856);
   DH ("FIPS 180-4 len 856 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_864);
   DH ("FIPS 180-4 len 864 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_872);
   DH ("FIPS 180-4 len 872 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_880);
   DH ("FIPS 180-4 len 880 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_888);
   DH ("FIPS 180-4 len 888 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_896);
   DH ("FIPS 180-4 len 896 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_904);
   DH ("FIPS 180-4 len 904 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_912);
   DH ("FIPS 180-4 len 912 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_920);
   DH ("FIPS 180-4 len 920 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_928);
   DH ("FIPS 180-4 len 928 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_936);
   DH ("FIPS 180-4 len 936 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_944);
   DH ("FIPS 180-4 len 944 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_952);
   DH ("FIPS 180-4 len 952 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_960);
   DH ("FIPS 180-4 len 960 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_968);
   DH ("FIPS 180-4 len 968 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_976);
   DH ("FIPS 180-4 len 976 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_984);
   DH ("FIPS 180-4 len 984 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_992);
   DH ("FIPS 180-4 len 992 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_1000);
   DH ("FIPS 180-4 len 1000 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_1008);
   DH ("FIPS 180-4 len 1008 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_1016);
   DH ("FIPS 180-4 len 1016 procedural API - SHA384 Hash is", R1);

   Hash (R1, FIPS_1024);
   DH ("FIPS 180-4 len 1024 procedural API - SHA384 Hash is", R1);
end Hash2;
