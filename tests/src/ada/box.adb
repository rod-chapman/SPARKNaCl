with SPARKNaCl;           use SPARKNaCl;
with SPARKNaCl.Cryptobox; use SPARKNaCl.Cryptobox;
with SPARKNaCl.Debug;     use SPARKNaCl.Debug;
with SPARKNaCl.Stream;
with Ada.Text_IO;         use Ada.Text_IO;

procedure Box

is
   AlicePK : constant Public_Key :=
     Construct ((16#85#, 16#20#, 16#f0#, 16#09#,
                 16#89#, 16#30#, 16#a7#, 16#54#,
                 16#74#, 16#8b#, 16#7d#, 16#dc#,
                 16#b4#, 16#3e#, 16#f7#, 16#5a#,
                 16#0d#, 16#bf#, 16#3a#, 16#0d#,
                 16#26#, 16#38#, 16#1a#, 16#f4#,
                 16#eb#, 16#a4#, 16#a9#, 16#8e#,
                 16#aa#, 16#9b#, 16#4e#, 16#6a#));

   AliceSK : constant Secret_Key :=
     Construct ((16#77#, 16#07#, 16#6d#, 16#0a#,
                 16#73#, 16#18#, 16#a5#, 16#7d#,
                 16#3c#, 16#16#, 16#c1#, 16#72#,
                 16#51#, 16#b2#, 16#66#, 16#45#,
                 16#df#, 16#4c#, 16#2f#, 16#87#,
                 16#eb#, 16#c0#, 16#99#, 16#2a#,
                 16#b1#, 16#77#, 16#fb#, 16#a5#,
                 16#1d#, 16#b9#, 16#2c#, 16#2a#));

   BobPK : constant Public_Key :=
     Construct ((16#de#, 16#9e#, 16#db#, 16#7d#,
                 16#7b#, 16#7d#, 16#c1#, 16#b4#,
                 16#d3#, 16#5b#, 16#61#, 16#c2#,
                 16#ec#, 16#e4#, 16#35#, 16#37#,
                 16#3f#, 16#83#, 16#43#, 16#c8#,
                 16#5b#, 16#78#, 16#67#, 16#4d#,
                 16#ad#, 16#fc#, 16#7e#, 16#14#,
                 16#6f#, 16#88#, 16#2b#, 16#4f#));

   BobSK : constant Secret_Key :=
     Construct ((16#5d#, 16#ab#, 16#08#, 16#7e#,
                 16#62#, 16#4a#, 16#8a#, 16#4b#,
                 16#79#, 16#e1#, 16#7f#, 16#8b#,
                 16#83#, 16#80#, 16#0e#, 16#e6#,
                 16#6f#, 16#3b#, 16#b1#, 16#29#,
                 16#26#, 16#18#, 16#b6#, 16#fd#,
                 16#1c#, 16#2f#, 16#8b#, 16#27#,
                 16#ff#, 16#88#, 16#e0#, 16#eb#));

   Nonce : constant Stream.HSalsa20_Nonce :=
     (16#69#, 16#69#, 16#6e#, 16#e9#,
      16#55#, 16#b6#, 16#2b#, 16#73#,
      16#cd#, 16#62#, 16#bd#, 16#a8#,
      16#75#, 16#fc#, 16#73#, 16#d6#,
      16#82#, 16#19#, 16#e0#, 16#03#,
      16#6b#, 16#7a#, 16#0b#, 16#37#);


   M : constant Byte_Seq (0 .. 162) :=
     (0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,
      16#be#, 16#07#, 16#5f#, 16#c5#, 16#3c#, 16#81#, 16#f2#, 16#d5#,
      16#cf#, 16#14#, 16#13#, 16#16#, 16#eb#, 16#eb#, 16#0c#, 16#7b#,
      16#52#, 16#28#, 16#c5#, 16#2a#, 16#4c#, 16#62#, 16#cb#, 16#d4#,
      16#4b#, 16#66#, 16#84#, 16#9b#, 16#64#, 16#24#, 16#4f#, 16#fc#,
      16#e5#, 16#ec#, 16#ba#, 16#af#, 16#33#, 16#bd#, 16#75#, 16#1a#,
      16#1a#, 16#c7#, 16#28#, 16#d4#, 16#5e#, 16#6c#, 16#61#, 16#29#,
      16#6c#, 16#dc#, 16#3c#, 16#01#, 16#23#, 16#35#, 16#61#, 16#f4#,
      16#1d#, 16#b6#, 16#6c#, 16#ce#, 16#31#, 16#4a#, 16#db#, 16#31#,
      16#0e#, 16#3b#, 16#e8#, 16#25#, 16#0c#, 16#46#, 16#f0#, 16#6d#,
      16#ce#, 16#ea#, 16#3a#, 16#7f#, 16#a1#, 16#34#, 16#80#, 16#57#,
      16#e2#, 16#f6#, 16#55#, 16#6a#, 16#d6#, 16#b1#, 16#31#, 16#8a#,
      16#02#, 16#4a#, 16#83#, 16#8f#, 16#21#, 16#af#, 16#1f#, 16#de#,
      16#04#, 16#89#, 16#77#, 16#eb#, 16#48#, 16#f5#, 16#9f#, 16#fd#,
      16#49#, 16#24#, 16#ca#, 16#1c#, 16#60#, 16#90#, 16#2e#, 16#52#,
      16#f0#, 16#a0#, 16#89#, 16#bc#, 16#76#, 16#89#, 16#70#, 16#40#,
      16#e0#, 16#82#, 16#f9#, 16#37#, 16#76#, 16#38#, 16#48#, 16#64#,
      16#5e#, 16#07#, 16#05#);


   C : Byte_Seq (0 .. 162);
   M2 : Byte_Seq (0 .. 162);
   Status : Boolean;
begin
   DH ("M is", M);

   Create (C, Status, M, Nonce, BobPK, AliceSK);
   Put_Line ("Status is " & Img (Status));
   DH ("C is", C);

   Open (M2, Status, C, Nonce, AlicePK, BobSK);
   Put_Line ("Status is " & Img (Status));
   DH ("M recovered is", M2);
end Box;
