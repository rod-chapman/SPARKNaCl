with SPARKNaCl;        use SPARKNaCl;
with SPARKNaCl.Core;   use SPARKNaCl.Core;
with SPARKNaCl.Debug;  use SPARKNaCl.Debug;
with SPARKNaCl.Stream; use SPARKNaCl.Stream;
procedure Stream7
is
   --  Test Vectors from RFC 8439 A.2

   Key1 : constant ChaCha20_Key :=
     Construct (Bytes_32'(others => 0));

   Key2 : constant ChaCha20_Key :=
     Construct (Bytes_32'(31 => 1, others => 0));

   Key3 : constant ChaCha20_Key :=
     Construct
       ((16#1c#, 16#92#, 16#40#, 16#a5#, 16#eb#, 16#55#, 16#d3#, 16#8a#,
         16#f3#, 16#33#, 16#88#, 16#86#, 16#04#, 16#f6#, 16#b5#, 16#f0#,
         16#47#, 16#39#, 16#17#, 16#c1#, 16#40#, 16#2b#, 16#80#, 16#09#,
         16#9d#, 16#ca#, 16#5c#, 16#bc#, 16#20#, 16#70#, 16#75#, 16#c0#));

   Nonce1 : constant ChaCha20_IETF_Nonce :=
     (others => 0);

   Nonce2 : constant ChaCha20_IETF_Nonce :=
     (11 => 2, others => 0);

   M1 : constant Bytes_64 := (others => 0);
   C1 : Bytes_64;

   M2 : constant Byte_Seq (0 .. 374) :=
     (16#41#, 16#6e#, 16#79#, 16#20#, 16#73#, 16#75#, 16#62#, 16#6d#,
      16#69#, 16#73#, 16#73#, 16#69#, 16#6f#, 16#6e#, 16#20#, 16#74#,
      16#6f#, 16#20#, 16#74#, 16#68#, 16#65#, 16#20#, 16#49#, 16#45#,
      16#54#, 16#46#, 16#20#, 16#69#, 16#6e#, 16#74#, 16#65#, 16#6e#,
      16#64#, 16#65#, 16#64#, 16#20#, 16#62#, 16#79#, 16#20#, 16#74#,
      16#68#, 16#65#, 16#20#, 16#43#, 16#6f#, 16#6e#, 16#74#, 16#72#,
      16#69#, 16#62#, 16#75#, 16#74#, 16#6f#, 16#72#, 16#20#, 16#66#,
      16#6f#, 16#72#, 16#20#, 16#70#, 16#75#, 16#62#, 16#6c#, 16#69#,
      16#63#, 16#61#, 16#74#, 16#69#, 16#6f#, 16#6e#, 16#20#, 16#61#,
      16#73#, 16#20#, 16#61#, 16#6c#, 16#6c#, 16#20#, 16#6f#, 16#72#,
      16#20#, 16#70#, 16#61#, 16#72#, 16#74#, 16#20#, 16#6f#, 16#66#,
      16#20#, 16#61#, 16#6e#, 16#20#, 16#49#, 16#45#, 16#54#, 16#46#,
      16#20#, 16#49#, 16#6e#, 16#74#, 16#65#, 16#72#, 16#6e#, 16#65#,
      16#74#, 16#2d#, 16#44#, 16#72#, 16#61#, 16#66#, 16#74#, 16#20#,
      16#6f#, 16#72#, 16#20#, 16#52#, 16#46#, 16#43#, 16#20#, 16#61#,
      16#6e#, 16#64#, 16#20#, 16#61#, 16#6e#, 16#79#, 16#20#, 16#73#,
      16#74#, 16#61#, 16#74#, 16#65#, 16#6d#, 16#65#, 16#6e#, 16#74#,
      16#20#, 16#6d#, 16#61#, 16#64#, 16#65#, 16#20#, 16#77#, 16#69#,
      16#74#, 16#68#, 16#69#, 16#6e#, 16#20#, 16#74#, 16#68#, 16#65#,
      16#20#, 16#63#, 16#6f#, 16#6e#, 16#74#, 16#65#, 16#78#, 16#74#,
      16#20#, 16#6f#, 16#66#, 16#20#, 16#61#, 16#6e#, 16#20#, 16#49#,
      16#45#, 16#54#, 16#46#, 16#20#, 16#61#, 16#63#, 16#74#, 16#69#,
      16#76#, 16#69#, 16#74#, 16#79#, 16#20#, 16#69#, 16#73#, 16#20#,
      16#63#, 16#6f#, 16#6e#, 16#73#, 16#69#, 16#64#, 16#65#, 16#72#,
      16#65#, 16#64#, 16#20#, 16#61#, 16#6e#, 16#20#, 16#22#, 16#49#,
      16#45#, 16#54#, 16#46#, 16#20#, 16#43#, 16#6f#, 16#6e#, 16#74#,
      16#72#, 16#69#, 16#62#, 16#75#, 16#74#, 16#69#, 16#6f#, 16#6e#,
      16#22#, 16#2e#, 16#20#, 16#53#, 16#75#, 16#63#, 16#68#, 16#20#,
      16#73#, 16#74#, 16#61#, 16#74#, 16#65#, 16#6d#, 16#65#, 16#6e#,
      16#74#, 16#73#, 16#20#, 16#69#, 16#6e#, 16#63#, 16#6c#, 16#75#,
      16#64#, 16#65#, 16#20#, 16#6f#, 16#72#, 16#61#, 16#6c#, 16#20#,
      16#73#, 16#74#, 16#61#, 16#74#, 16#65#, 16#6d#, 16#65#, 16#6e#,
      16#74#, 16#73#, 16#20#, 16#69#, 16#6e#, 16#20#, 16#49#, 16#45#,
      16#54#, 16#46#, 16#20#, 16#73#, 16#65#, 16#73#, 16#73#, 16#69#,
      16#6f#, 16#6e#, 16#73#, 16#2c#, 16#20#, 16#61#, 16#73#, 16#20#,
      16#77#, 16#65#, 16#6c#, 16#6c#, 16#20#, 16#61#, 16#73#, 16#20#,
      16#77#, 16#72#, 16#69#, 16#74#, 16#74#, 16#65#, 16#6e#, 16#20#,
      16#61#, 16#6e#, 16#64#, 16#20#, 16#65#, 16#6c#, 16#65#, 16#63#,
      16#74#, 16#72#, 16#6f#, 16#6e#, 16#69#, 16#63#, 16#20#, 16#63#,
      16#6f#, 16#6d#, 16#6d#, 16#75#, 16#6e#, 16#69#, 16#63#, 16#61#,
      16#74#, 16#69#, 16#6f#, 16#6e#, 16#73#, 16#20#, 16#6d#, 16#61#,
      16#64#, 16#65#, 16#20#, 16#61#, 16#74#, 16#20#, 16#61#, 16#6e#,
      16#79#, 16#20#, 16#74#, 16#69#, 16#6d#, 16#65#, 16#20#, 16#6f#,
      16#72#, 16#20#, 16#70#, 16#6c#, 16#61#, 16#63#, 16#65#, 16#2c#,
      16#20#, 16#77#, 16#68#, 16#69#, 16#63#, 16#68#, 16#20#, 16#61#,
      16#72#, 16#65#, 16#20#, 16#61#, 16#64#, 16#64#, 16#72#, 16#65#,
      16#73#, 16#73#, 16#65#, 16#64#, 16#20#, 16#74#, 16#6f#);
   C2 : Byte_Seq (0 .. 374);

   M3 : constant Byte_Seq (0 .. 126) :=
     (16#27#, 16#54#, 16#77#, 16#61#, 16#73#, 16#20#, 16#62#, 16#72#,
      16#69#, 16#6c#, 16#6c#, 16#69#, 16#67#, 16#2c#, 16#20#, 16#61#,
      16#6e#, 16#64#, 16#20#, 16#74#, 16#68#, 16#65#, 16#20#, 16#73#,
      16#6c#, 16#69#, 16#74#, 16#68#, 16#79#, 16#20#, 16#74#, 16#6f#,
      16#76#, 16#65#, 16#73#, 16#0a#, 16#44#, 16#69#, 16#64#, 16#20#,
      16#67#, 16#79#, 16#72#, 16#65#, 16#20#, 16#61#, 16#6e#, 16#64#,
      16#20#, 16#67#, 16#69#, 16#6d#, 16#62#, 16#6c#, 16#65#, 16#20#,
      16#69#, 16#6e#, 16#20#, 16#74#, 16#68#, 16#65#, 16#20#, 16#77#,
      16#61#, 16#62#, 16#65#, 16#3a#, 16#0a#, 16#41#, 16#6c#, 16#6c#,
      16#20#, 16#6d#, 16#69#, 16#6d#, 16#73#, 16#79#, 16#20#, 16#77#,
      16#65#, 16#72#, 16#65#, 16#20#, 16#74#, 16#68#, 16#65#, 16#20#,
      16#62#, 16#6f#, 16#72#, 16#6f#, 16#67#, 16#6f#, 16#76#, 16#65#,
      16#73#, 16#2c#, 16#0a#, 16#41#, 16#6e#, 16#64#, 16#20#, 16#74#,
      16#68#, 16#65#, 16#20#, 16#6d#, 16#6f#, 16#6d#, 16#65#, 16#20#,
      16#72#, 16#61#, 16#74#, 16#68#, 16#73#, 16#20#, 16#6f#, 16#75#,
      16#74#, 16#67#, 16#72#, 16#61#, 16#62#, 16#65#, 16#2e#);
   C3 : Byte_Seq (0 .. 126);



begin
   -- Test Vector #1
   ChaCha20_IETF_Xor (C1, M1, Nonce1, Key1, 0);
   DH ("Test Vector #1 Ciphertext. See RFC 8539 section A.2", C1);

   -- Test Vector #2
   ChaCha20_IETF_Xor (C2, M2, Nonce2, Key2, 1);
   DH ("Test Vector #2 Ciphertext. See RFC 8539 section A.2", C2);

   -- Test Vector #3
   ChaCha20_IETF_Xor (C3, M3, Nonce2, Key3, 42);
   DH ("Test Vector #3 Ciphertext. See RFC 8539 section A.2", C3);
end Stream7;
