with SPARKNaCl;     use SPARKNaCl;
with SPARKNaCl.AES; use SPARKNaCl.AES;

with Ada.Text_IO; use Ada.Text_IO;

procedure AES256_Cipher_KAT
is
   Test_Case_Count : constant I32 := 12;

   --  All tests vectors, that are used here, come from NISTs AES Algorithm
   --  Validation Suite (AESAVS). The actual files, where vectors can be found,
   --  are part of the ZIP archive pointed to by the following link:
   --  https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/aes/KAT_AES.zip
   Keys : constant array (1 .. Test_Case_Count) of Bytes_32 := (
     -- ECB VarKey 256 count 0
     1 => (16#80#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB GFSbox 256 Count 0
     2 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB KeySbox 256 Count 0
     3 => (16#c4#, 16#7b#, 16#02#, 16#94#, 16#db#, 16#bb#, 16#ee#, 16#0f#,
           16#ec#, 16#47#, 16#57#, 16#f2#, 16#2f#, 16#fe#, 16#ee#, 16#35#,
           16#87#, 16#ca#, 16#47#, 16#30#, 16#c3#, 16#d3#, 16#3b#, 16#69#,
           16#1d#, 16#f3#, 16#8b#, 16#ab#, 16#07#, 16#6b#, 16#c5#, 16#58#),
     -- ECB VarKey 256 Count 1
     4 => (16#c0#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB GFSbox 256 Count 1
     5 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB KeySbox 256 Count 1
     6 => (16#28#, 16#d4#, 16#6c#, 16#ff#, 16#a1#, 16#58#, 16#53#, 16#31#,
           16#94#, 16#21#, 16#4a#, 16#91#, 16#e7#, 16#12#, 16#fc#, 16#2b#,
           16#45#, 16#b5#, 16#18#, 16#07#, 16#66#, 16#75#, 16#af#, 16#fd#,
           16#91#, 16#0e#, 16#de#, 16#ca#, 16#5f#, 16#41#, 16#ac#, 16#64#),
     -- ECB VarKey 256 count 2
     7 => (16#e0#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB GFSbox 256 Count 2
     8 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB KeySbox 256 Count 2
     9 => (16#c1#, 16#cc#, 16#35#, 16#8b#, 16#44#, 16#99#, 16#09#, 16#a1#,
           16#94#, 16#36#, 16#cf#, 16#bb#, 16#3f#, 16#85#, 16#2e#, 16#f8#,
           16#bc#, 16#b5#, 16#ed#, 16#12#, 16#ac#, 16#70#, 16#58#, 16#32#,
           16#5f#, 16#56#, 16#e6#, 16#09#, 16#9a#, 16#ab#, 16#1a#, 16#1c#),
     -- ECB VarKey 256 Count 3
     10 => (16#f0#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB GFSbox 256 Count 3
     11 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     -- ECB KeySbox 256 Count 3
     12 => (16#98#, 16#4c#, 16#a7#, 16#5f#, 16#4e#, 16#e8#, 16#d7#, 16#06#,
           16#f4#, 16#6c#, 16#2d#, 16#98#, 16#c0#, 16#bf#, 16#4a#, 16#45#,
           16#f5#, 16#b0#, 16#0d#, 16#79#, 16#1c#, 16#2d#, 16#fe#, 16#b1#,
           16#91#, 16#b5#, 16#ed#, 16#8e#, 16#42#, 16#0f#, 16#d6#, 16#27#));

   Plaintexts : constant array (1 .. Test_Case_Count) of Bytes_16 := (
     1 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     2 => (16#0b#, 16#24#, 16#af#, 16#36#, 16#19#, 16#3c#, 16#e4#, 16#66#,
           16#5f#, 16#28#, 16#25#, 16#d7#, 16#b4#, 16#74#, 16#9c#, 16#98#),
     3 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     4 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     5 => (16#0b#, 16#24#, 16#af#, 16#36#, 16#19#, 16#3c#, 16#e4#, 16#66#,
           16#5f#, 16#28#, 16#25#, 16#d7#, 16#b4#, 16#74#, 16#9c#, 16#98#),
     6 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     7 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     8 => (16#76#, 16#1c#, 16#1f#, 16#e4#, 16#1a#, 16#18#, 16#ac#, 16#f2#,
           16#0d#, 16#24#, 16#16#, 16#50#, 16#61#, 16#1d#, 16#90#, 16#f1#),
     9 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     10 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#),
     11 => (16#8a#, 16#56#, 16#07#, 16#69#, 16#d6#, 16#05#, 16#86#, 16#8a#,
           16#d8#, 16#0d#, 16#81#, 16#9b#, 16#db#, 16#a0#, 16#37#, 16#71#),
     12 => (16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#,
           16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#, 16#00#));

   Ciphertexts : constant array (1 .. Test_Case_Count) of Bytes_16 := (
     1 => (16#e3#, 16#5a#, 16#6d#, 16#cb#, 16#19#, 16#b2#, 16#01#, 16#a0#,
           16#1e#, 16#bc#, 16#fa#, 16#8a#, 16#a2#, 16#2b#, 16#57#, 16#59#),
     2 => (16#a9#, 16#ff#, 16#75#, 16#bd#, 16#7c#, 16#f6#, 16#61#, 16#3d#,
           16#37#, 16#31#, 16#c7#, 16#7c#, 16#3b#, 16#6d#, 16#0c#, 16#04#),
     3 => (16#46#, 16#f2#, 16#fb#, 16#34#, 16#2d#, 16#6f#, 16#0a#, 16#b4#,
           16#77#, 16#47#, 16#6f#, 16#c5#, 16#01#, 16#24#, 16#2c#, 16#5f#),
     4 => (16#b2#, 16#91#, 16#69#, 16#cd#, 16#cf#, 16#2d#, 16#83#, 16#e8#,
           16#38#, 16#12#, 16#5a#, 16#12#, 16#ee#, 16#6a#, 16#a4#, 16#00#),
     5 => (16#a9#, 16#ff#, 16#75#, 16#bd#, 16#7c#, 16#f6#, 16#61#, 16#3d#,
           16#37#, 16#31#, 16#c7#, 16#7c#, 16#3b#, 16#6d#, 16#0c#, 16#04#),
     6 => (16#4b#, 16#f3#, 16#b0#, 16#a6#, 16#9a#, 16#eb#, 16#66#, 16#57#,
           16#79#, 16#4f#, 16#29#, 16#01#, 16#b1#, 16#44#, 16#0a#, 16#d4#),
     7 => (16#d8#, 16#f3#, 16#a7#, 16#2f#, 16#c3#, 16#cd#, 16#f7#, 16#4d#,
           16#fa#, 16#f6#, 16#c3#, 16#e6#, 16#b9#, 16#7b#, 16#2f#, 16#a6#),
     8 => (16#62#, 16#3a#, 16#52#, 16#fc#, 16#ea#, 16#5d#, 16#44#, 16#3e#,
           16#48#, 16#d9#, 16#18#, 16#1a#, 16#b3#, 16#2c#, 16#74#, 16#21#),
     9 => (16#35#, 16#20#, 16#65#, 16#27#, 16#21#, 16#69#, 16#ab#, 16#f9#,
           16#85#, 16#68#, 16#43#, 16#92#, 16#7d#, 16#06#, 16#74#, 16#fd#),
     10 => (16#1c#, 16#77#, 16#76#, 16#79#, 16#d5#, 16#00#, 16#37#, 16#c7#,
           16#94#, 16#91#, 16#a9#, 16#4d#, 16#a7#, 16#6a#, 16#9a#, 16#35#),
     11 => (16#38#, 16#f2#, 16#c7#, 16#ae#, 16#10#, 16#61#, 16#24#, 16#15#,
           16#d2#, 16#7c#, 16#a1#, 16#90#, 16#d2#, 16#7d#, 16#a8#, 16#b4#),
     12 => (16#43#, 16#07#, 16#45#, 16#6a#, 16#9e#, 16#67#, 16#81#, 16#3b#,
           16#45#, 16#2e#, 16#15#, 16#fa#, 16#8f#, 16#ff#, 16#e3#, 16#98#));

begin
   for I in Keys'Range loop
      Put ("AES256 Cipher KAT - iteration" & I'Img & ": ");

      declare
         Key        : constant AES256_Key := Construct (Keys (I));
         Round_Keys : constant AES256_Round_Keys := Key_Expansion (Key);

         Plaintext  : constant Bytes_16 := Plaintexts (I);
         Ciphertext : constant Bytes_16 := Ciphertexts (I);

         Result : Bytes_16;
      begin
         Cipher (Result, Plaintext, Round_Keys);

         if Equal (Result, Ciphertext) then
            Put ("OK");
         else
            Put ("BAD");
         end if;

         Put (" Encryption | ");

         Inv_Cipher (Result, Ciphertext, Round_Keys);

         if Equal (Result, Plaintext) then
            Put ("OK");
         else
            Put ("BAD");
         end if;

         Put_Line (" Decryption");
      end;
   end loop; 
end AES256_Cipher_KAT;
